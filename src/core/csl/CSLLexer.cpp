/** \file
 *  This C source file was generated by $ANTLR version 3.3 Nov 30, 2010 12:45:30
 *
 *     -  From the grammar source file : /Users/tbastos/Projects/coral/src/core/csl/CSL.g
 *     -                            On : 2011-01-06 00:14:26
 *     -                 for the lexer : CSLLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
*/
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

	#define	ANTLR3_INLINE_INPUT_8BIT

/* End of Header action.
 * =============================================================================
 */
/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "CSLLexer.h"
/* ----------------------------------------- */


/** String literals used by CSLLexer that we must do things like MATCHS() with.
 *  C will normally just lay down 8 bit characters, and you can use L"xxx" to
 *  get wchar_t, but wchar_t is 16 bits on Windows, which is not UTF32 and so
 *  we perform this little trick of defining the literals as arrays of UINT32
 *  and passing in the address of these.
 */
static ANTLR3_UCHAR	lit_1[]  = { 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_2[]  = { 0x61, 0x6E, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_3[]  = { 0x62, 0x6F, 0x6F, 0x6C,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_4[]  = { 0x69, 0x6E, 0x74, 0x38,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_5[]  = { 0x75, 0x69, 0x6E, 0x74, 0x38,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_6[]  = { 0x69, 0x6E, 0x74, 0x31, 0x36,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_7[]  = { 0x75, 0x69, 0x6E, 0x74, 0x31, 0x36,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_8[]  = { 0x69, 0x6E, 0x74, 0x33, 0x32,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_9[]  = { 0x75, 0x69, 0x6E, 0x74, 0x33, 0x32,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_10[]  = { 0x69, 0x6E, 0x74, 0x36, 0x34,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_11[]  = { 0x75, 0x69, 0x6E, 0x74, 0x36, 0x34,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_12[]  = { 0x66, 0x6C, 0x6F, 0x61, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_13[]  = { 0x64, 0x6F, 0x75, 0x62, 0x6C, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_14[]  = { 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_15[]  = { 0x63, 0x6C, 0x61, 0x73, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_16[]  = { 0x3A, 0x3A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_17[]  = { 0x63, 0x6F, 0x6D, 0x70, 0x6F, 0x6E, 0x65, 0x6E, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_18[]  = { 0x65, 0x6E, 0x75, 0x6D,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_19[]  = { 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_20[]  = { 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_21[]  = { 0x69, 0x6E, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_22[]  = { 0x6E, 0x61, 0x74, 0x69, 0x76, 0x65,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_23[]  = { 0x69, 0x6E,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_24[]  = { 0x69, 0x6E, 0x6F, 0x75, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_25[]  = { 0x6F, 0x75, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_26[]  = { 0x70, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_27[]  = { 0x72, 0x61, 0x69, 0x73, 0x65, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_28[]  = { 0x72, 0x65, 0x61, 0x64, 0x6F, 0x6E, 0x6C, 0x79,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_29[]  = { 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_30[]  = { 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_31[]  = { 0x76, 0x6F, 0x69, 0x64,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_32[]  = { 0x2F, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_33[]  = { 0x0D, 0x0A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_34[]  = { 0x2F, 0x2A,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_35[]  = { 0x2A, 0x2F,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_36[]  = { 0x3C, 0x63, 0x2B, 0x2B,  ANTLR3_STRING_TERMINATOR};
static ANTLR3_UCHAR	lit_37[]  = { 0x63, 0x2B, 0x2B, 0x3E,  ANTLR3_STRING_TERMINATOR};




/* MACROS that hide the C interface implementations from the
 * generated code, which makes it a little more understandable to the human eye.
 * I am very much against using C pre-processor macros for function calls and bits
 * of code as you cannot see what is happening when single stepping in debuggers
 * and so on. The exception (in my book at least) is for generated code, where you are
 * not maintaining it, but may wish to read and understand it. If you single step it, you know that input()
 * hides some indirect calls, but is always referring to the input stream. This is
 * probably more readable than ctx->input->istream->input(snarfle0->blarg) and allows me to rejig
 * the runtime interfaces without changing the generated code too often, without
 * confusing the reader of the generated output, who may not wish to know the gory
 * details of the interface inheritance.
 */
 
#define		CTX	ctx

/* Aids in accessing scopes for grammar programmers
 */
#undef	SCOPE_TYPE
#undef	SCOPE_STACK
#undef	SCOPE_TOP
#define	SCOPE_TYPE(scope)   pCSLLexer_##scope##_SCOPE
#define SCOPE_STACK(scope)  pCSLLexer_##scope##Stack
#define	SCOPE_TOP(scope)    ctx->pCSLLexer_##scope##Top
#define	SCOPE_SIZE(scope)		ctx->pCSLLexer_##scope##Stack_limit
#define SCOPE_INSTANCE(scope, i)	(ctx->SCOPE_STACK(scope)->get(ctx->SCOPE_STACK(scope),i))

 
/* Macros for accessing things in a lexer
 */
#undef	    LEXER
#undef	    RECOGNIZER		    
#undef	    RULEMEMO		    
#undef	    GETCHARINDEX
#undef	    GETLINE
#undef	    GETCHARPOSITIONINLINE
#undef	    EMIT
#undef	    EMITNEW
#undef	    MATCHC
#undef	    MATCHS
#undef	    MATCHRANGE
#undef	    LTOKEN
#undef	    HASFAILED
#undef	    FAILEDFLAG
#undef	    INPUT
#undef	    STRSTREAM
#undef	    LA
#undef	    HASEXCEPTION
#undef	    EXCEPTION
#undef	    CONSTRUCTEX
#undef	    CONSUME
#undef	    LRECOVER
#undef	    MARK
#undef	    REWIND
#undef	    REWINDLAST
#undef	    BACKTRACKING
#undef		MATCHANY
#undef		MEMOIZE
#undef		HAVEPARSEDRULE
#undef		GETTEXT
#undef		INDEX
#undef		SEEK
#undef		PUSHSTREAM
#undef		POPSTREAM
#undef		SETTEXT
#undef		SETTEXT8

#define	    LEXER					ctx->pLexer
#define	    RECOGNIZER			    LEXER->rec
#define		LEXSTATE				RECOGNIZER->state
#define		TOKSOURCE				LEXSTATE->tokSource
#define	    GETCHARINDEX()			LEXER->getCharIndex(LEXER)
#define	    GETLINE()				LEXER->getLine(LEXER)
#define	    GETTEXT()				LEXER->getText(LEXER)
#define	    GETCHARPOSITIONINLINE() LEXER->getCharPositionInLine(LEXER)
#define	    EMIT()					LEXSTATE->type = _type; LEXER->emit(LEXER)
#define	    EMITNEW(t)				LEXER->emitNew(LEXER, t)
#define	    MATCHC(c)				LEXER->matchc(LEXER, c)
#define	    MATCHS(s)				LEXER->matchs(LEXER, s)
#define	    MATCHRANGE(c1,c2)	    LEXER->matchRange(LEXER, c1, c2)
#define	    MATCHANY()				LEXER->matchAny(LEXER)
#define	    LTOKEN  				LEXSTATE->token
#define	    HASFAILED()				(LEXSTATE->failed == ANTLR3_TRUE)
#define	    BACKTRACKING			LEXSTATE->backtracking
#define	    FAILEDFLAG				LEXSTATE->failed
#define	    INPUT					LEXER->input
#define	    STRSTREAM				INPUT
#define		ISTREAM					INPUT->istream
#define		INDEX()					ISTREAM->index(ISTREAM)
#define		SEEK(n)					ISTREAM->seek(ISTREAM, n)
#define	    EOF_TOKEN				&(LEXSTATE->tokSource->eofToken)
#define	    HASEXCEPTION()			(LEXSTATE->error == ANTLR3_TRUE)
#define	    EXCEPTION				LEXSTATE->exception
#define	    CONSTRUCTEX()			RECOGNIZER->exConstruct(RECOGNIZER)
#define	    LRECOVER()				LEXER->recover(LEXER)
#define	    MARK()					ISTREAM->mark(ISTREAM)
#define	    REWIND(m)				ISTREAM->rewind(ISTREAM, m)
#define	    REWINDLAST()			ISTREAM->rewindLast(ISTREAM)
#define		MEMOIZE(ri,si)			RECOGNIZER->memoize(RECOGNIZER, ri, si)
#define		HAVEPARSEDRULE(r)		RECOGNIZER->alreadyParsedRule(RECOGNIZER, r)
#define		PUSHSTREAM(str)			LEXER->pushCharStream(LEXER, str)
#define		POPSTREAM()				LEXER->popCharStream(LEXER)
#define		SETTEXT(str)			LEXSTATE->text = str
#define		SKIP()					LEXSTATE->token = &(TOKSOURCE->skipToken)
#define		USER1					LEXSTATE->user1
#define		USER2					LEXSTATE->user2
#define		USER3					LEXSTATE->user3
#define		CUSTOM					LEXSTATE->custom
#define		RULEMEMO				LEXSTATE->ruleMemo
#define		DBG						RECOGNIZER->debugger

/* If we have been told we can rely on the standard 8 bit or UTF16 input
 * stream, then we can define our macros to use the direct pointers
 * in the input object, which is much faster than indirect calls. This
 * is really only significant to lexers with a lot of fragment rules (which
 * do not place LA(1) in a temporary at the moment) and even then
 * only if there is a lot of input (order of say 1M or so).
 */
#if	defined(ANTLR3_INLINE_INPUT_8BIT) || defined(ANTLR3_INLINE_INPUT_UTF16)

# ifdef	ANTLR3_INLINE_INPUT_8BIT

/* 8 bit character set */

#  define	    NEXTCHAR	((pANTLR3_UINT8)(INPUT->nextChar))
#  define	    DATAP	((pANTLR3_UINT8)(INPUT->data))

# else

#  define	    NEXTCHAR	((pANTLR3_UINT16)(INPUT->nextChar)) 
#  define	    DATAP	((pANTLR3_UINT16)(INPUT->data))

# endif

# define	    LA(n) ((NEXTCHAR + n) > (DATAP + INPUT->sizeBuf) ? ANTLR3_CHARSTREAM_EOF : (ANTLR3_UCHAR)(*(NEXTCHAR + n - 1)))
# define            CONSUME()                                           \
{                                                                       \
    if        (NEXTCHAR < (DATAP + INPUT->sizeBuf))                     \
    {                                                                   \
        INPUT->charPositionInLine++;                                    \
        if  ((ANTLR3_UCHAR)(*NEXTCHAR) == INPUT->newlineChar)           \
        {                                                               \
            INPUT->line++;                                              \
            INPUT->charPositionInLine        = 0;                       \
            INPUT->currentLine                = (void *)(NEXTCHAR + 1); \
        }                                                               \
        INPUT->nextChar = (void *)(NEXTCHAR + 1);                       \
    }                                                                   \
}

#else

// Pick up the input character by calling the input stream implementation.
//
#define	    CONSUME()   INPUT->istream->consume(INPUT->istream)
#define	    LA(n)       INPUT->istream->_LA(INPUT->istream, n)

#endif
#define		TOKTEXT(tok, txt)				tok, (pANTLR3_UINT8)txt

/* The 4 tokens defined below may well clash with your own #defines or token types. If so
 * then for the present you must use different names for your defines as these are hard coded
 * in the code generator. It would be better not to use such names internally, and maybe
 * we can change this in a forthcoming release. I deliberately do not #undef these
 * here as this will at least give you a redefined error somewhere if they clash.
 */
#define	    UP	    ANTLR3_TOKEN_UP
#define	    DOWN    ANTLR3_TOKEN_DOWN
#define	    EOR	    ANTLR3_TOKEN_EOR
#define	    INVALID ANTLR3_TOKEN_INVALID


/* =============================================================================
 * Functions to create and destroy scopes. First come the rule scopes, followed
 * by the global declared scopes.
 */



/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */


/* Forward declare the locally static matching functions we have generated and any predicate functions.
 */
static ANTLR3_INLINE  void	mATTRIBUTE    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mBASIC_TYPE    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCLASS    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCPP_SCOPE    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCOLON    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCOMMA    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCOMPONENT    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mENUM    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mEXCEPTION_TOKEN    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mIMPORT    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mINTERFACE    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mNATIVE    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mTOK_IN    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mTOK_INOUT    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mTOK_OUT    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mPROVIDES    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mRAISES    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mREADONLY    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mRECEIVES    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mSEMICOLON    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mSTRUCT    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mTOK_VOID    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mOPEN_BLOCK    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mOPEN_BRACE    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mOPEN_PAREN    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCLOSE_BLOCK    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCLOSE_BRACE    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCLOSE_PAREN    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mDOT    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mID    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCOMMENT    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCPP_BLOCK    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mCPP_TAG    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mWS    (pCSLLexer ctx);
static ANTLR3_INLINE  void	mTokens    (pCSLLexer ctx);
static void	CSLLexerFree(pCSLLexer ctx);

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */



static void
CSLLexerFree  (pCSLLexer ctx)
{
    LEXER->free(LEXER);
    
    ANTLR3_FREE(ctx);
}

static void
CSLLexerReset (pCSLLexer ctx)
{
    RECOGNIZER->reset(RECOGNIZER);
}

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "/Users/tbastos/Projects/coral/src/core/csl/CSL.g";

/** \brief Return the name of the grammar file that generated this code.
 */
static const char * getGrammarFileName()
{
	return fileName;
}

/** \brief Create a new lexer called CSLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \return 
 *     - Success pCSLLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pCSLLexer CSLLexerNew         
(pANTLR3_INPUT_STREAM instream)
{
	// See if we can create a new lexer with the standard constructor
	//
	return CSLLexerNewSSD(instream, NULL);
}

/** \brief Create a new lexer called CSLLexer
 *
 * \param[in]    instream Pointer to an initialized input stream
 * \param[state] state Previously created shared recognizer stat
 * \return 
 *     - Success pCSLLexer initialized for the lex start
 *     - Fail NULL
 */
ANTLR3_API pCSLLexer CSLLexerNewSSD         
(pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state)
{
    pCSLLexer ctx; // Context structure we will build and return

    ctx = (pCSLLexer) ANTLR3_CALLOC(1, sizeof(CSLLexer));

    if  (ctx == NULL)
    {
        // Failed to allocate memory for lexer context
        return  NULL;
    }

    /* -------------------------------------------------------------------
     * Memory for basic structure is allocated, now to fill in
     * in base ANTLR3 structures. We initialize the function pointers
     * for the standard ANTLR3 lexer function set, but upon return
     * from here, the programmer may set the pointers to provide custom
     * implementations of each function. 
     *
     * We don't use the macros defined in CSLLexer.h here so you can get a sense
     * of what goes where.
     */
    
    /* Create a base lexer, using the supplied input stream
     */
    ctx->pLexer	= antlr3LexerNewStream(ANTLR3_SIZE_HINT, instream, state);
    
    /* Check that we allocated the memory correctly
     */
    if	(ctx->pLexer == NULL)
    {
		ANTLR3_FREE(ctx);
		return  NULL;
    }
    /* Install the implementation of our CSLLexer interface
     */
    ctx->mATTRIBUTE	= mATTRIBUTE;
    ctx->mBASIC_TYPE	= mBASIC_TYPE;
    ctx->mCLASS	= mCLASS;
    ctx->mCPP_SCOPE	= mCPP_SCOPE;
    ctx->mCOLON	= mCOLON;
    ctx->mCOMMA	= mCOMMA;
    ctx->mCOMPONENT	= mCOMPONENT;
    ctx->mENUM	= mENUM;
    ctx->mEXCEPTION_TOKEN	= mEXCEPTION_TOKEN;
    ctx->mIMPORT	= mIMPORT;
    ctx->mINTERFACE	= mINTERFACE;
    ctx->mNATIVE	= mNATIVE;
    ctx->mTOK_IN	= mTOK_IN;
    ctx->mTOK_INOUT	= mTOK_INOUT;
    ctx->mTOK_OUT	= mTOK_OUT;
    ctx->mPROVIDES	= mPROVIDES;
    ctx->mRAISES	= mRAISES;
    ctx->mREADONLY	= mREADONLY;
    ctx->mRECEIVES	= mRECEIVES;
    ctx->mSEMICOLON	= mSEMICOLON;
    ctx->mSTRUCT	= mSTRUCT;
    ctx->mTOK_VOID	= mTOK_VOID;
    ctx->mOPEN_BLOCK	= mOPEN_BLOCK;
    ctx->mOPEN_BRACE	= mOPEN_BRACE;
    ctx->mOPEN_PAREN	= mOPEN_PAREN;
    ctx->mCLOSE_BLOCK	= mCLOSE_BLOCK;
    ctx->mCLOSE_BRACE	= mCLOSE_BRACE;
    ctx->mCLOSE_PAREN	= mCLOSE_PAREN;
    ctx->mDOT	= mDOT;
    ctx->mID	= mID;
    ctx->mCOMMENT	= mCOMMENT;
    ctx->mCPP_BLOCK	= mCPP_BLOCK;
    ctx->mCPP_TAG	= mCPP_TAG;
    ctx->mWS	= mWS;
    ctx->mTokens	= mTokens;
    
    /** When the nextToken() call is made to this lexer's pANTLR3_TOKEN_SOURCE
     *  it will call mTokens() in this generated code, and will pass it the ctx
     * pointer of this lexer, not the context of the base lexer, so store that now.
     */
    ctx->pLexer->ctx	    = ctx;
    
    /**Install the token matching function
     */
    ctx->pLexer->mTokens = (void (*) (void *))(mTokens);
    
    ctx->getGrammarFileName	= getGrammarFileName;
    ctx->free		= CSLLexerFree;
    ctx->reset          = CSLLexerReset;

    
    


    /* Return the newly built lexer to the caller
     */
    return  ctx;
}
 

/* =========================================================================
 * Functions to match the lexer grammar defined tokens from the input stream
 */

//   Comes from: 254:2: ( 'attribute' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ATTRIBUTE
 *
 * Looks to match the characters the constitute the token ATTRIBUTE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mATTRIBUTE(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ATTRIBUTE;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:254:2: ( 'attribute' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:254:4: 'attribute'
    {
        MATCHS(lit_1); 
        if  (HASEXCEPTION())
        {
            goto ruleATTRIBUTEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleATTRIBUTEEx; /* Prevent compiler warnings */
    ruleATTRIBUTEEx: ;

}
// $ANTLR end ATTRIBUTE

//   Comes from: 258:2: ( 'any' | 'bool' | 'int8' | 'uint8' | 'int16' | 'uint16' | 'int32' | 'uint32' | 'int64' | 'uint64' | 'float' | 'double' | 'string' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start BASIC_TYPE
 *
 * Looks to match the characters the constitute the token BASIC_TYPE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mBASIC_TYPE(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = BASIC_TYPE;
       
    
    {
        //  /Users/tbastos/Projects/coral/src/core/csl/CSL.g:258:2: ( 'any' | 'bool' | 'int8' | 'uint8' | 'int16' | 'uint16' | 'int32' | 'uint32' | 'int64' | 'uint64' | 'float' | 'double' | 'string' )
        
        ANTLR3_UINT32 alt1;

        alt1=13;

        switch ( LA(1) ) 
        {
        case 'a':
        	{
        		alt1=1;
        	}
            break;
        case 'b':
        	{
        		alt1=2;
        	}
            break;
        case 'i':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case '8':
        							{
        								alt1=3;
        							}
        						    break;
        						case '1':
        							{
        								alt1=5;
        							}
        						    break;
        						case '3':
        							{
        								alt1=7;
        							}
        						    break;
        						case '6':
        							{
        								alt1=9;
        							}
        						    break;

        						default:
        						    CONSTRUCTEX();
        						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        						    EXCEPTION->message      = (void *)"";
        						    EXCEPTION->decisionNum  = 1;
        						    EXCEPTION->state        = 10;


        						    goto ruleBASIC_TYPEEx;
        						}

        					}
        				    break;

        				default:
        				    CONSTRUCTEX();
        				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        				    EXCEPTION->message      = (void *)"";
        				    EXCEPTION->decisionNum  = 1;
        				    EXCEPTION->state        = 8;


        				    goto ruleBASIC_TYPEEx;
        				}

        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 1;
        		    EXCEPTION->state        = 3;


        		    goto ruleBASIC_TYPEEx;
        		}

        	}
            break;
        case 'u':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'i':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'n':
        					{
        						switch ( LA(4) ) 
        						{
        						case 't':
        							{
        								switch ( LA(5) ) 
        								{
        								case '8':
        									{
        										alt1=4;
        									}
        								    break;
        								case '1':
        									{
        										alt1=6;
        									}
        								    break;
        								case '3':
        									{
        										alt1=8;
        									}
        								    break;
        								case '6':
        									{
        										alt1=10;
        									}
        								    break;

        								default:
        								    CONSTRUCTEX();
        								    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        								    EXCEPTION->message      = (void *)"";
        								    EXCEPTION->decisionNum  = 1;
        								    EXCEPTION->state        = 16;


        								    goto ruleBASIC_TYPEEx;
        								}

        							}
        						    break;

        						default:
        						    CONSTRUCTEX();
        						    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        						    EXCEPTION->message      = (void *)"";
        						    EXCEPTION->decisionNum  = 1;
        						    EXCEPTION->state        = 11;


        						    goto ruleBASIC_TYPEEx;
        						}

        					}
        				    break;

        				default:
        				    CONSTRUCTEX();
        				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        				    EXCEPTION->message      = (void *)"";
        				    EXCEPTION->decisionNum  = 1;
        				    EXCEPTION->state        = 9;


        				    goto ruleBASIC_TYPEEx;
        				}

        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 1;
        		    EXCEPTION->state        = 4;


        		    goto ruleBASIC_TYPEEx;
        		}

        	}
            break;
        case 'f':
        	{
        		alt1=11;
        	}
            break;
        case 'd':
        	{
        		alt1=12;
        	}
            break;
        case 's':
        	{
        		alt1=13;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 1;
            EXCEPTION->state        = 0;


            goto ruleBASIC_TYPEEx;
        }

        switch (alt1) 
        {
    	case 1:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:258:4: 'any'
    	    {
    	        MATCHS(lit_2); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 2:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:259:4: 'bool'
    	    {
    	        MATCHS(lit_3); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 3:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:260:4: 'int8'
    	    {
    	        MATCHS(lit_4); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 4:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:261:4: 'uint8'
    	    {
    	        MATCHS(lit_5); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 5:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:262:4: 'int16'
    	    {
    	        MATCHS(lit_6); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 6:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:263:4: 'uint16'
    	    {
    	        MATCHS(lit_7); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 7:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:264:4: 'int32'
    	    {
    	        MATCHS(lit_8); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 8:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:265:4: 'uint32'
    	    {
    	        MATCHS(lit_9); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 9:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:266:4: 'int64'
    	    {
    	        MATCHS(lit_10); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 10:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:267:4: 'uint64'
    	    {
    	        MATCHS(lit_11); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 11:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:268:4: 'float'
    	    {
    	        MATCHS(lit_12); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 12:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:269:4: 'double'
    	    {
    	        MATCHS(lit_13); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;
    	case 13:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:270:4: 'string'
    	    {
    	        MATCHS(lit_14); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleBASIC_TYPEEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleBASIC_TYPEEx; /* Prevent compiler warnings */
    ruleBASIC_TYPEEx: ;

}
// $ANTLR end BASIC_TYPE

//   Comes from: 274:2: ( 'class' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLASS
 *
 * Looks to match the characters the constitute the token CLASS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCLASS(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CLASS;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:274:2: ( 'class' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:274:4: 'class'
    {
        MATCHS(lit_15); 
        if  (HASEXCEPTION())
        {
            goto ruleCLASSEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCLASSEx; /* Prevent compiler warnings */
    ruleCLASSEx: ;

}
// $ANTLR end CLASS

//   Comes from: 278:2: ( '::' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CPP_SCOPE
 *
 * Looks to match the characters the constitute the token CPP_SCOPE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCPP_SCOPE(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CPP_SCOPE;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:278:2: ( '::' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:278:4: '::'
    {
        MATCHS(lit_16); 
        if  (HASEXCEPTION())
        {
            goto ruleCPP_SCOPEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCPP_SCOPEEx; /* Prevent compiler warnings */
    ruleCPP_SCOPEEx: ;

}
// $ANTLR end CPP_SCOPE

//   Comes from: 282:2: ( ':' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COLON
 *
 * Looks to match the characters the constitute the token COLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOLON(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COLON;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:282:2: ( ':' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:282:4: ':'
    {
        MATCHC(':'); 
        if  (HASEXCEPTION())
        {
            goto ruleCOLONEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOLONEx; /* Prevent compiler warnings */
    ruleCOLONEx: ;

}
// $ANTLR end COLON

//   Comes from: 286:2: ( ',' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMA
 *
 * Looks to match the characters the constitute the token COMMA
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMA(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMA;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:286:2: ( ',' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:286:4: ','
    {
        MATCHC(','); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMMAEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMAEx; /* Prevent compiler warnings */
    ruleCOMMAEx: ;

}
// $ANTLR end COMMA

//   Comes from: 290:2: ( 'component' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMPONENT
 *
 * Looks to match the characters the constitute the token COMPONENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMPONENT(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMPONENT;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:290:2: ( 'component' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:290:4: 'component'
    {
        MATCHS(lit_17); 
        if  (HASEXCEPTION())
        {
            goto ruleCOMPONENTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMPONENTEx; /* Prevent compiler warnings */
    ruleCOMPONENTEx: ;

}
// $ANTLR end COMPONENT

//   Comes from: 294:2: ( 'enum' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ENUM
 *
 * Looks to match the characters the constitute the token ENUM
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mENUM(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ENUM;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:294:2: ( 'enum' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:294:4: 'enum'
    {
        MATCHS(lit_18); 
        if  (HASEXCEPTION())
        {
            goto ruleENUMEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleENUMEx; /* Prevent compiler warnings */
    ruleENUMEx: ;

}
// $ANTLR end ENUM

//   Comes from: 298:2: ( 'exception' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start EXCEPTION_TOKEN
 *
 * Looks to match the characters the constitute the token EXCEPTION_TOKEN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mEXCEPTION_TOKEN(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = EXCEPTION_TOKEN;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:298:2: ( 'exception' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:298:4: 'exception'
    {
        MATCHS(lit_19); 
        if  (HASEXCEPTION())
        {
            goto ruleEXCEPTION_TOKENEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleEXCEPTION_TOKENEx; /* Prevent compiler warnings */
    ruleEXCEPTION_TOKENEx: ;

}
// $ANTLR end EXCEPTION_TOKEN

//   Comes from: 302:2: ( 'import' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start IMPORT
 *
 * Looks to match the characters the constitute the token IMPORT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mIMPORT(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = IMPORT;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:302:2: ( 'import' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:302:4: 'import'
    {
        MATCHS(lit_20); 
        if  (HASEXCEPTION())
        {
            goto ruleIMPORTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIMPORTEx; /* Prevent compiler warnings */
    ruleIMPORTEx: ;

}
// $ANTLR end IMPORT

//   Comes from: 306:2: ( 'interface' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start INTERFACE
 *
 * Looks to match the characters the constitute the token INTERFACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mINTERFACE(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = INTERFACE;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:306:2: ( 'interface' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:306:4: 'interface'
    {
        MATCHS(lit_21); 
        if  (HASEXCEPTION())
        {
            goto ruleINTERFACEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleINTERFACEEx; /* Prevent compiler warnings */
    ruleINTERFACEEx: ;

}
// $ANTLR end INTERFACE

//   Comes from: 310:2: ( 'native' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start NATIVE
 *
 * Looks to match the characters the constitute the token NATIVE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mNATIVE(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = NATIVE;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:310:2: ( 'native' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:310:4: 'native'
    {
        MATCHS(lit_22); 
        if  (HASEXCEPTION())
        {
            goto ruleNATIVEEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleNATIVEEx; /* Prevent compiler warnings */
    ruleNATIVEEx: ;

}
// $ANTLR end NATIVE

//   Comes from: 314:2: ( 'in' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TOK_IN
 *
 * Looks to match the characters the constitute the token TOK_IN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTOK_IN(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = TOK_IN;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:314:2: ( 'in' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:314:4: 'in'
    {
        MATCHS(lit_23); 
        if  (HASEXCEPTION())
        {
            goto ruleTOK_INEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTOK_INEx; /* Prevent compiler warnings */
    ruleTOK_INEx: ;

}
// $ANTLR end TOK_IN

//   Comes from: 318:2: ( 'inout' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TOK_INOUT
 *
 * Looks to match the characters the constitute the token TOK_INOUT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTOK_INOUT(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = TOK_INOUT;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:318:2: ( 'inout' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:318:4: 'inout'
    {
        MATCHS(lit_24); 
        if  (HASEXCEPTION())
        {
            goto ruleTOK_INOUTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTOK_INOUTEx; /* Prevent compiler warnings */
    ruleTOK_INOUTEx: ;

}
// $ANTLR end TOK_INOUT

//   Comes from: 322:2: ( 'out' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TOK_OUT
 *
 * Looks to match the characters the constitute the token TOK_OUT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTOK_OUT(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = TOK_OUT;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:322:2: ( 'out' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:322:4: 'out'
    {
        MATCHS(lit_25); 
        if  (HASEXCEPTION())
        {
            goto ruleTOK_OUTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTOK_OUTEx; /* Prevent compiler warnings */
    ruleTOK_OUTEx: ;

}
// $ANTLR end TOK_OUT

//   Comes from: 326:2: ( 'provides' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start PROVIDES
 *
 * Looks to match the characters the constitute the token PROVIDES
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mPROVIDES(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = PROVIDES;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:326:2: ( 'provides' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:326:4: 'provides'
    {
        MATCHS(lit_26); 
        if  (HASEXCEPTION())
        {
            goto rulePROVIDESEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto rulePROVIDESEx; /* Prevent compiler warnings */
    rulePROVIDESEx: ;

}
// $ANTLR end PROVIDES

//   Comes from: 330:2: ( 'raises' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RAISES
 *
 * Looks to match the characters the constitute the token RAISES
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRAISES(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RAISES;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:330:2: ( 'raises' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:330:4: 'raises'
    {
        MATCHS(lit_27); 
        if  (HASEXCEPTION())
        {
            goto ruleRAISESEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRAISESEx; /* Prevent compiler warnings */
    ruleRAISESEx: ;

}
// $ANTLR end RAISES

//   Comes from: 334:2: ( 'readonly' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start READONLY
 *
 * Looks to match the characters the constitute the token READONLY
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mREADONLY(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = READONLY;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:334:2: ( 'readonly' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:334:4: 'readonly'
    {
        MATCHS(lit_28); 
        if  (HASEXCEPTION())
        {
            goto ruleREADONLYEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleREADONLYEx; /* Prevent compiler warnings */
    ruleREADONLYEx: ;

}
// $ANTLR end READONLY

//   Comes from: 338:2: ( 'receives' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start RECEIVES
 *
 * Looks to match the characters the constitute the token RECEIVES
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mRECEIVES(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = RECEIVES;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:338:2: ( 'receives' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:338:4: 'receives'
    {
        MATCHS(lit_29); 
        if  (HASEXCEPTION())
        {
            goto ruleRECEIVESEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleRECEIVESEx; /* Prevent compiler warnings */
    ruleRECEIVESEx: ;

}
// $ANTLR end RECEIVES

//   Comes from: 342:2: ( ';' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start SEMICOLON
 *
 * Looks to match the characters the constitute the token SEMICOLON
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSEMICOLON(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = SEMICOLON;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:342:2: ( ';' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:342:4: ';'
    {
        MATCHC(';'); 
        if  (HASEXCEPTION())
        {
            goto ruleSEMICOLONEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSEMICOLONEx; /* Prevent compiler warnings */
    ruleSEMICOLONEx: ;

}
// $ANTLR end SEMICOLON

//   Comes from: 346:2: ( 'struct' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start STRUCT
 *
 * Looks to match the characters the constitute the token STRUCT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mSTRUCT(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = STRUCT;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:346:2: ( 'struct' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:346:4: 'struct'
    {
        MATCHS(lit_30); 
        if  (HASEXCEPTION())
        {
            goto ruleSTRUCTEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleSTRUCTEx; /* Prevent compiler warnings */
    ruleSTRUCTEx: ;

}
// $ANTLR end STRUCT

//   Comes from: 350:2: ( 'void' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start TOK_VOID
 *
 * Looks to match the characters the constitute the token TOK_VOID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mTOK_VOID(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = TOK_VOID;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:350:2: ( 'void' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:350:4: 'void'
    {
        MATCHS(lit_31); 
        if  (HASEXCEPTION())
        {
            goto ruleTOK_VOIDEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleTOK_VOIDEx; /* Prevent compiler warnings */
    ruleTOK_VOIDEx: ;

}
// $ANTLR end TOK_VOID

//   Comes from: 354:2: ( '{' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPEN_BLOCK
 *
 * Looks to match the characters the constitute the token OPEN_BLOCK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOPEN_BLOCK(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OPEN_BLOCK;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:354:2: ( '{' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:354:4: '{'
    {
        MATCHC('{'); 
        if  (HASEXCEPTION())
        {
            goto ruleOPEN_BLOCKEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOPEN_BLOCKEx; /* Prevent compiler warnings */
    ruleOPEN_BLOCKEx: ;

}
// $ANTLR end OPEN_BLOCK

//   Comes from: 358:2: ( '[' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPEN_BRACE
 *
 * Looks to match the characters the constitute the token OPEN_BRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOPEN_BRACE(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OPEN_BRACE;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:358:2: ( '[' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:358:4: '['
    {
        MATCHC('['); 
        if  (HASEXCEPTION())
        {
            goto ruleOPEN_BRACEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOPEN_BRACEEx; /* Prevent compiler warnings */
    ruleOPEN_BRACEEx: ;

}
// $ANTLR end OPEN_BRACE

//   Comes from: 362:2: ( '(' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start OPEN_PAREN
 *
 * Looks to match the characters the constitute the token OPEN_PAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mOPEN_PAREN(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = OPEN_PAREN;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:362:2: ( '(' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:362:4: '('
    {
        MATCHC('('); 
        if  (HASEXCEPTION())
        {
            goto ruleOPEN_PARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleOPEN_PARENEx; /* Prevent compiler warnings */
    ruleOPEN_PARENEx: ;

}
// $ANTLR end OPEN_PAREN

//   Comes from: 366:2: ( '}' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSE_BLOCK
 *
 * Looks to match the characters the constitute the token CLOSE_BLOCK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCLOSE_BLOCK(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CLOSE_BLOCK;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:366:2: ( '}' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:366:4: '}'
    {
        MATCHC('}'); 
        if  (HASEXCEPTION())
        {
            goto ruleCLOSE_BLOCKEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCLOSE_BLOCKEx; /* Prevent compiler warnings */
    ruleCLOSE_BLOCKEx: ;

}
// $ANTLR end CLOSE_BLOCK

//   Comes from: 370:2: ( ']' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSE_BRACE
 *
 * Looks to match the characters the constitute the token CLOSE_BRACE
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCLOSE_BRACE(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CLOSE_BRACE;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:370:2: ( ']' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:370:4: ']'
    {
        MATCHC(']'); 
        if  (HASEXCEPTION())
        {
            goto ruleCLOSE_BRACEEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCLOSE_BRACEEx; /* Prevent compiler warnings */
    ruleCLOSE_BRACEEx: ;

}
// $ANTLR end CLOSE_BRACE

//   Comes from: 374:2: ( ')' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CLOSE_PAREN
 *
 * Looks to match the characters the constitute the token CLOSE_PAREN
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCLOSE_PAREN(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CLOSE_PAREN;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:374:2: ( ')' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:374:4: ')'
    {
        MATCHC(')'); 
        if  (HASEXCEPTION())
        {
            goto ruleCLOSE_PARENEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCLOSE_PARENEx; /* Prevent compiler warnings */
    ruleCLOSE_PARENEx: ;

}
// $ANTLR end CLOSE_PAREN

//   Comes from: 377:5: ( '.' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start DOT
 *
 * Looks to match the characters the constitute the token DOT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mDOT(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = DOT;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:377:5: ( '.' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:377:7: '.'
    {
        MATCHC('.'); 
        if  (HASEXCEPTION())
        {
            goto ruleDOTEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleDOTEx; /* Prevent compiler warnings */
    ruleDOTEx: ;

}
// $ANTLR end DOT

//   Comes from: 379:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start ID
 *
 * Looks to match the characters the constitute the token ID
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mID(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = ID;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:379:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:379:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    {
        if ( ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleIDEx;
        }


        // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:379:30: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*

        for (;;)
        {
            int alt2=2;
            switch ( LA(1) ) 
            {
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt2=1;
            	}
                break;

            }

            switch (alt2) 
            {
        	case 1:
        	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:
        	    {
        	        if ( ((LA(1) >= '0') && (LA(1) <= '9')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleIDEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop2;	/* break out of the loop */
        	    break;
            }
        }
        loop2: ; /* Jump out to here if this rule does not match */


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleIDEx; /* Prevent compiler warnings */
    ruleIDEx: ;

}
// $ANTLR end ID

//   Comes from: 383:2: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r\\n' | '\\r' | '\\n' | EOF ) | '/*' ( options {greedy=false; } : . )* '*/' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start COMMENT
 *
 * Looks to match the characters the constitute the token COMMENT
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCOMMENT(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = COMMENT;
       
    
    {
        //  /Users/tbastos/Projects/coral/src/core/csl/CSL.g:383:2: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r\\n' | '\\r' | '\\n' | EOF ) | '/*' ( options {greedy=false; } : . )* '*/' )
        
        ANTLR3_UINT32 alt6;

        alt6=2;

        switch ( LA(1) ) 
        {
        case '/':
        	{
        		switch ( LA(2) ) 
        		{
        		case '/':
        			{
        				alt6=1;
        			}
        		    break;
        		case '*':
        			{
        				alt6=2;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 6;
        		    EXCEPTION->state        = 1;


        		    goto ruleCOMMENTEx;
        		}

        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 6;
            EXCEPTION->state        = 0;


            goto ruleCOMMENTEx;
        }

        switch (alt6) 
        {
    	case 1:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:383:4: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r\\n' | '\\r' | '\\n' | EOF )
    	    {
    	        MATCHS(lit_32); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	        // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:383:9: (~ ( '\\n' | '\\r' ) )*

    	        for (;;)
    	        {
    	            int alt3=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA3_0 = LA(1);
    	                if ( (((LA3_0 >= 0x0000) && (LA3_0 <= '\t')) || ((LA3_0 >= 0x000B) && (LA3_0 <= '\f')) || ((LA3_0 >= 0x000E) && (LA3_0 <= 0xFFFF)))) 
    	                {
    	                    alt3=1;
    	                }

    	            }
    	            switch (alt3) 
    	            {
    	        	case 1:
    	        	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:383:9: ~ ( '\\n' | '\\r' )
    	        	    {
    	        	        if ( ((LA(1) >= 0x0000) && (LA(1) <= '\t')) || ((LA(1) >= 0x000B) && (LA(1) <= '\f')) || ((LA(1) >= 0x000E) && (LA(1) <= 0xFFFF)) )
    	        	        {
    	        	            CONSUME();

    	        	        }
    	        	        else 
    	        	        {
    	        	            CONSTRUCTEX();
    	        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
    	        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

    	        	            LRECOVER();    goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop3;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop3: ; /* Jump out to here if this rule does not match */


    	        // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:383:23: ( '\\r\\n' | '\\r' | '\\n' | EOF )
    	        {
    	            int alt4=4;
    	            switch ( LA(1) ) 
    	            {
    	            case '\r':
    	            	{
    	            		switch ( LA(2) ) 
    	            		{
    	            		case '\n':
    	            			{
    	            				alt4=1;
    	            			}
    	            		    break;

    	            		default:
    	            		    alt4=2;}

    	            	}
    	                break;
    	            case '\n':
    	            	{
    	            		alt4=3;
    	            	}
    	                break;

    	            default:
    	                alt4=4;}

    	            switch (alt4) 
    	            {
    	        	case 1:
    	        	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:383:24: '\\r\\n'
    	        	    {
    	        	        MATCHS(lit_33); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }



    	        	    }
    	        	    break;
    	        	case 2:
    	        	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:383:31: '\\r'
    	        	    {
    	        	        MATCHC('\r'); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;
    	        	case 3:
    	        	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:383:36: '\\n'
    	        	    {
    	        	        MATCHC('\n'); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;
    	        	case 4:
    	        	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:383:41: EOF
    	        	    {
    	        	            MATCHC(ANTLR3_CHARSTREAM_EOF); 
    	        	            if  (HASEXCEPTION())
    	        	            {
    	        	                goto ruleCOMMENTEx;
    	        	            }


    	        	    }
    	        	    break;

    	            }
    	        }

    	    }
    	    break;
    	case 2:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:384:4: '/*' ( options {greedy=false; } : . )* '*/'
    	    {
    	        MATCHS(lit_34); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	        // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:384:9: ( options {greedy=false; } : . )*

    	        for (;;)
    	        {
    	            int alt5=2;
    	            {
    	               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                */
    	                int LA5_0 = LA(1);
    	                if ( (LA5_0 == '*')) 
    	                {
    	                    {
    	                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
    	                        */
    	                        int LA5_1 = LA(2);
    	                        if ( (LA5_1 == '/')) 
    	                        {
    	                            alt5=2;
    	                        }
    	                        else if ( (((LA5_1 >= 0x0000) && (LA5_1 <= '.')) || ((LA5_1 >= '0') && (LA5_1 <= 0xFFFF)))) 
    	                        {
    	                            alt5=1;
    	                        }

    	                    }
    	                }
    	                else if ( (((LA5_0 >= 0x0000) && (LA5_0 <= ')')) || ((LA5_0 >= '+') && (LA5_0 <= 0xFFFF)))) 
    	                {
    	                    alt5=1;
    	                }

    	            }
    	            switch (alt5) 
    	            {
    	        	case 1:
    	        	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:384:41: .
    	        	    {
    	        	        MATCHANY(); 
    	        	        if  (HASEXCEPTION())
    	        	        {
    	        	            goto ruleCOMMENTEx;
    	        	        }


    	        	    }
    	        	    break;

    	        	default:
    	        	    goto loop5;	/* break out of the loop */
    	        	    break;
    	            }
    	        }
    	        loop5: ; /* Jump out to here if this rule does not match */

    	        MATCHS(lit_35); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleCOMMENTEx;
    	        }



    	    }
    	    break;

        }
    }
	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCOMMENTEx; /* Prevent compiler warnings */
    ruleCOMMENTEx: ;

}
// $ANTLR end COMMENT

//   Comes from: 388:2: ( '<c++' ( options {greedy=false; } : . )* 'c++>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CPP_BLOCK
 *
 * Looks to match the characters the constitute the token CPP_BLOCK
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCPP_BLOCK(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CPP_BLOCK;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:388:2: ( '<c++' ( options {greedy=false; } : . )* 'c++>' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:388:4: '<c++' ( options {greedy=false; } : . )* 'c++>'
    {
        MATCHS(lit_36); 
        if  (HASEXCEPTION())
        {
            goto ruleCPP_BLOCKEx;
        }



        // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:388:11: ( options {greedy=false; } : . )*

        for (;;)
        {
            int alt7=2;
            {
               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                */
                int LA7_0 = LA(1);
                if ( (LA7_0 == 'c')) 
                {
                    {
                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                        */
                        int LA7_1 = LA(2);
                        if ( (LA7_1 == '+')) 
                        {
                            {
                               /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                */
                                int LA7_3 = LA(3);
                                if ( (LA7_3 == '+')) 
                                {
                                    {
                                       /* dfaLoopbackState(k,edges,eotPredictsAlt,description,stateNumber,semPredState)
                                        */
                                        int LA7_4 = LA(4);
                                        if ( (LA7_4 == '>')) 
                                        {
                                            alt7=2;
                                        }
                                        else if ( (((LA7_4 >= 0x0000) && (LA7_4 <= '=')) || ((LA7_4 >= '?') && (LA7_4 <= 0xFFFF)))) 
                                        {
                                            alt7=1;
                                        }

                                    }
                                }
                                else if ( (((LA7_3 >= 0x0000) && (LA7_3 <= '*')) || ((LA7_3 >= ',') && (LA7_3 <= 0xFFFF)))) 
                                {
                                    alt7=1;
                                }

                            }
                        }
                        else if ( (((LA7_1 >= 0x0000) && (LA7_1 <= '*')) || ((LA7_1 >= ',') && (LA7_1 <= 0xFFFF)))) 
                        {
                            alt7=1;
                        }

                    }
                }
                else if ( (((LA7_0 >= 0x0000) && (LA7_0 <= 'b')) || ((LA7_0 >= 'd') && (LA7_0 <= 0xFFFF)))) 
                {
                    alt7=1;
                }

            }
            switch (alt7) 
            {
        	case 1:
        	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:388:43: .
        	    {
        	        MATCHANY(); 
        	        if  (HASEXCEPTION())
        	        {
        	            goto ruleCPP_BLOCKEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop7;	/* break out of the loop */
        	    break;
            }
        }
        loop7: ; /* Jump out to here if this rule does not match */

        MATCHS(lit_37); 
        if  (HASEXCEPTION())
        {
            goto ruleCPP_BLOCKEx;
        }



    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCPP_BLOCKEx; /* Prevent compiler warnings */
    ruleCPP_BLOCKEx: ;

}
// $ANTLR end CPP_BLOCK

//   Comes from: 392:2: ( '<' ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | ':' | '.' | ',' | '/' | ' ' )* '>' )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start CPP_TAG
 *
 * Looks to match the characters the constitute the token CPP_TAG
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mCPP_TAG(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = CPP_TAG;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:392:2: ( '<' ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | ':' | '.' | ',' | '/' | ' ' )* '>' )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:392:4: '<' ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | ':' | '.' | ',' | '/' | ' ' )* '>'
    {
        MATCHC('<'); 
        if  (HASEXCEPTION())
        {
            goto ruleCPP_TAGEx;
        }


        // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:392:8: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' | ':' | '.' | ',' | '/' | ' ' )*

        for (;;)
        {
            int alt8=2;
            switch ( LA(1) ) 
            {
            case ' ':
            case ',':
            case '.':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
            case '_':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            	{
            		alt8=1;
            	}
                break;

            }

            switch (alt8) 
            {
        	case 1:
        	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:
        	    {
        	        if ( LA(1) == ' ' || LA(1) == ',' || ((LA(1) >= '.') && (LA(1) <= ':')) || ((LA(1) >= 'A') && (LA(1) <= 'Z')) || LA(1) == '_' || ((LA(1) >= 'a') && (LA(1) <= 'z')) )
        	        {
        	            CONSUME();

        	        }
        	        else 
        	        {
        	            CONSTRUCTEX();
        	            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
        	            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

        	            LRECOVER();    goto ruleCPP_TAGEx;
        	        }


        	    }
        	    break;

        	default:
        	    goto loop8;	/* break out of the loop */
        	    break;
            }
        }
        loop8: ; /* Jump out to here if this rule does not match */

        MATCHC('>'); 
        if  (HASEXCEPTION())
        {
            goto ruleCPP_TAGEx;
        }


    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleCPP_TAGEx; /* Prevent compiler warnings */
    ruleCPP_TAGEx: ;

}
// $ANTLR end CPP_TAG

//   Comes from: 396:2: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
/** \brief Lexer rule generated by ANTLR3
 *
 * $ANTLR start WS
 *
 * Looks to match the characters the constitute the token WS
 * from the attached input stream.
 *
 *
 * \remark
 *  - lexer->error == ANTLR3_TRUE if an exception was thrown.
 */
static ANTLR3_INLINE
void mWS(pCSLLexer ctx)
{
	ANTLR3_UINT32	_type;

    _type	    = WS;
       
    
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:396:2: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:396:5: ( ' ' | '\\t' | '\\r' | '\\n' )
    {
        if ( ((LA(1) >= '\t') && (LA(1) <= '\n')) || LA(1) == '\r' || LA(1) == ' ' )
        {
            CONSUME();

        }
        else 
        {
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_MISMATCHED_SET_EXCEPTION;
            EXCEPTION->name         = (void *)ANTLR3_MISMATCHED_SET_NAME;

            LRECOVER();    goto ruleWSEx;
        }

        {
             LEXSTATE->channel = HIDDEN; 
        }

    }

	LEXSTATE->type = _type;

    // This is where rules clean up and exit
    //
    goto ruleWSEx; /* Prevent compiler warnings */
    ruleWSEx: ;

}
// $ANTLR end WS

/** This is the entry point in to the lexer from an object that
 *  wants to generate the next token, such as a pCOMMON_TOKEN_STREAM
 */
static void 
mTokens(pCSLLexer ctx)
{
    {
        //  /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:8: ( ATTRIBUTE | BASIC_TYPE | CLASS | CPP_SCOPE | COLON | COMMA | COMPONENT | ENUM | EXCEPTION_TOKEN | IMPORT | INTERFACE | NATIVE | TOK_IN | TOK_INOUT | TOK_OUT | PROVIDES | RAISES | READONLY | RECEIVES | SEMICOLON | STRUCT | TOK_VOID | OPEN_BLOCK | OPEN_BRACE | OPEN_PAREN | CLOSE_BLOCK | CLOSE_BRACE | CLOSE_PAREN | DOT | ID | COMMENT | CPP_BLOCK | CPP_TAG | WS )
        
        ANTLR3_UINT32 alt9;

        alt9=34;

        switch ( LA(1) ) 
        {
        case 'a':
        	{
        		switch ( LA(2) ) 
        		{
        		case 't':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'r':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'i':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'b':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'u':
        													{
        														switch ( LA(8) ) 
        														{
        														case 't':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'e':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt9=30;
        																			}
        																		    break;

        																		default:
        																		    alt9=1;}

        																	}
        																    break;

        																default:
        																    alt9=30;}

        															}
        														    break;

        														default:
        														    alt9=30;}

        													}
        												    break;

        												default:
        												    alt9=30;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'y':
        					{
        						switch ( LA(4) ) 
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt9=30;
        							}
        						    break;

        						default:
        						    alt9=2;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'b':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'l':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt9=30;
        									}
        								    break;

        								default:
        								    alt9=2;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'i':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case '8':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt9=30;
        									}
        								    break;

        								default:
        								    alt9=2;}

        							}
        						    break;
        						case '1':
        							{
        								switch ( LA(5) ) 
        								{
        								case '6':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt9=30;
        											}
        										    break;

        										default:
        										    alt9=2;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;
        						case '3':
        							{
        								switch ( LA(5) ) 
        								{
        								case '2':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt9=30;
        											}
        										    break;

        										default:
        										    alt9=2;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;
        						case '6':
        							{
        								switch ( LA(5) ) 
        								{
        								case '4':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt9=30;
        											}
        										    break;

        										default:
        										    alt9=2;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'r':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'f':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'a':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'c':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'e':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt9=30;
        																			}
        																		    break;

        																		default:
        																		    alt9=11;}

        																	}
        																    break;

        																default:
        																    alt9=30;}

        															}
        														    break;

        														default:
        														    alt9=30;}

        													}
        												    break;

        												default:
        												    alt9=30;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'u':
        							{
        								switch ( LA(5) ) 
        								{
        								case 't':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt9=30;
        											}
        										    break;

        										default:
        										    alt9=14;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt9=30;
        					}
        				    break;

        				default:
        				    alt9=13;}

        			}
        		    break;
        		case 'm':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'p':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'o':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'r':
        									{
        										switch ( LA(6) ) 
        										{
        										case 't':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt9=30;
        													}
        												    break;

        												default:
        												    alt9=10;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'u':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'i':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'n':
        					{
        						switch ( LA(4) ) 
        						{
        						case 't':
        							{
        								switch ( LA(5) ) 
        								{
        								case '8':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt9=30;
        											}
        										    break;

        										default:
        										    alt9=2;}

        									}
        								    break;
        								case '1':
        									{
        										switch ( LA(6) ) 
        										{
        										case '6':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt9=30;
        													}
        												    break;

        												default:
        												    alt9=2;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;
        								case '3':
        									{
        										switch ( LA(6) ) 
        										{
        										case '2':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt9=30;
        													}
        												    break;

        												default:
        												    alt9=2;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;
        								case '6':
        									{
        										switch ( LA(6) ) 
        										{
        										case '4':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt9=30;
        													}
        												    break;

        												default:
        												    alt9=2;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'f':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'l':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'a':
        							{
        								switch ( LA(5) ) 
        								{
        								case 't':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt9=30;
        											}
        										    break;

        										default:
        										    alt9=2;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'd':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'u':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'b':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'l':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'e':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt9=30;
        													}
        												    break;

        												default:
        												    alt9=2;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 's':
        	{
        		switch ( LA(2) ) 
        		{
        		case 't':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'r':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'i':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'n':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'g':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt9=30;
        													}
        												    break;

        												default:
        												    alt9=2;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;
        						case 'u':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'c':
        									{
        										switch ( LA(6) ) 
        										{
        										case 't':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt9=30;
        													}
        												    break;

        												default:
        												    alt9=21;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'c':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'l':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'a':
        					{
        						switch ( LA(4) ) 
        						{
        						case 's':
        							{
        								switch ( LA(5) ) 
        								{
        								case 's':
        									{
        										switch ( LA(6) ) 
        										{
        										case '0':
        										case '1':
        										case '2':
        										case '3':
        										case '4':
        										case '5':
        										case '6':
        										case '7':
        										case '8':
        										case '9':
        										case 'A':
        										case 'B':
        										case 'C':
        										case 'D':
        										case 'E':
        										case 'F':
        										case 'G':
        										case 'H':
        										case 'I':
        										case 'J':
        										case 'K':
        										case 'L':
        										case 'M':
        										case 'N':
        										case 'O':
        										case 'P':
        										case 'Q':
        										case 'R':
        										case 'S':
        										case 'T':
        										case 'U':
        										case 'V':
        										case 'W':
        										case 'X':
        										case 'Y':
        										case 'Z':
        										case '_':
        										case 'a':
        										case 'b':
        										case 'c':
        										case 'd':
        										case 'e':
        										case 'f':
        										case 'g':
        										case 'h':
        										case 'i':
        										case 'j':
        										case 'k':
        										case 'l':
        										case 'm':
        										case 'n':
        										case 'o':
        										case 'p':
        										case 'q':
        										case 'r':
        										case 's':
        										case 't':
        										case 'u':
        										case 'v':
        										case 'w':
        										case 'x':
        										case 'y':
        										case 'z':
        											{
        												alt9=30;
        											}
        										    break;

        										default:
        										    alt9=3;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'm':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'p':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'o':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'n':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'e':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'n':
        															{
        																switch ( LA(9) ) 
        																{
        																case 't':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt9=30;
        																			}
        																		    break;

        																		default:
        																		    alt9=7;}

        																	}
        																    break;

        																default:
        																    alt9=30;}

        															}
        														    break;

        														default:
        														    alt9=30;}

        													}
        												    break;

        												default:
        												    alt9=30;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case ':':
        	{
        		switch ( LA(2) ) 
        		{
        		case ':':
        			{
        				alt9=4;
        			}
        		    break;

        		default:
        		    alt9=5;}

        	}
            break;
        case ',':
        	{
        		alt9=6;
        	}
            break;
        case 'e':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'n':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'u':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'm':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt9=30;
        									}
        								    break;

        								default:
        								    alt9=8;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;
        		case 'x':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'c':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'p':
        									{
        										switch ( LA(6) ) 
        										{
        										case 't':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'i':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'o':
        															{
        																switch ( LA(9) ) 
        																{
        																case 'n':
        																	{
        																		switch ( LA(10) ) 
        																		{
        																		case '0':
        																		case '1':
        																		case '2':
        																		case '3':
        																		case '4':
        																		case '5':
        																		case '6':
        																		case '7':
        																		case '8':
        																		case '9':
        																		case 'A':
        																		case 'B':
        																		case 'C':
        																		case 'D':
        																		case 'E':
        																		case 'F':
        																		case 'G':
        																		case 'H':
        																		case 'I':
        																		case 'J':
        																		case 'K':
        																		case 'L':
        																		case 'M':
        																		case 'N':
        																		case 'O':
        																		case 'P':
        																		case 'Q':
        																		case 'R':
        																		case 'S':
        																		case 'T':
        																		case 'U':
        																		case 'V':
        																		case 'W':
        																		case 'X':
        																		case 'Y':
        																		case 'Z':
        																		case '_':
        																		case 'a':
        																		case 'b':
        																		case 'c':
        																		case 'd':
        																		case 'e':
        																		case 'f':
        																		case 'g':
        																		case 'h':
        																		case 'i':
        																		case 'j':
        																		case 'k':
        																		case 'l':
        																		case 'm':
        																		case 'n':
        																		case 'o':
        																		case 'p':
        																		case 'q':
        																		case 'r':
        																		case 's':
        																		case 't':
        																		case 'u':
        																		case 'v':
        																		case 'w':
        																		case 'x':
        																		case 'y':
        																		case 'z':
        																			{
        																				alt9=30;
        																			}
        																		    break;

        																		default:
        																		    alt9=9;}

        																	}
        																    break;

        																default:
        																    alt9=30;}

        															}
        														    break;

        														default:
        														    alt9=30;}

        													}
        												    break;

        												default:
        												    alt9=30;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'n':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'a':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'i':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'v':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'e':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt9=30;
        													}
        												    break;

        												default:
        												    alt9=12;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'o':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'u':
        			{
        				switch ( LA(3) ) 
        				{
        				case 't':
        					{
        						switch ( LA(4) ) 
        						{
        						case '0':
        						case '1':
        						case '2':
        						case '3':
        						case '4':
        						case '5':
        						case '6':
        						case '7':
        						case '8':
        						case '9':
        						case 'A':
        						case 'B':
        						case 'C':
        						case 'D':
        						case 'E':
        						case 'F':
        						case 'G':
        						case 'H':
        						case 'I':
        						case 'J':
        						case 'K':
        						case 'L':
        						case 'M':
        						case 'N':
        						case 'O':
        						case 'P':
        						case 'Q':
        						case 'R':
        						case 'S':
        						case 'T':
        						case 'U':
        						case 'V':
        						case 'W':
        						case 'X':
        						case 'Y':
        						case 'Z':
        						case '_':
        						case 'a':
        						case 'b':
        						case 'c':
        						case 'd':
        						case 'e':
        						case 'f':
        						case 'g':
        						case 'h':
        						case 'i':
        						case 'j':
        						case 'k':
        						case 'l':
        						case 'm':
        						case 'n':
        						case 'o':
        						case 'p':
        						case 'q':
        						case 'r':
        						case 's':
        						case 't':
        						case 'u':
        						case 'v':
        						case 'w':
        						case 'x':
        						case 'y':
        						case 'z':
        							{
        								alt9=30;
        							}
        						    break;

        						default:
        						    alt9=15;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'p':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'r':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'o':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'v':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'i':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'd':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'e':
        													{
        														switch ( LA(8) ) 
        														{
        														case 's':
        															{
        																switch ( LA(9) ) 
        																{
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt9=30;
        																	}
        																    break;

        																default:
        																    alt9=16;}

        															}
        														    break;

        														default:
        														    alt9=30;}

        													}
        												    break;

        												default:
        												    alt9=30;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case 'r':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'a':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 's':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'e':
        									{
        										switch ( LA(6) ) 
        										{
        										case 's':
        											{
        												switch ( LA(7) ) 
        												{
        												case '0':
        												case '1':
        												case '2':
        												case '3':
        												case '4':
        												case '5':
        												case '6':
        												case '7':
        												case '8':
        												case '9':
        												case 'A':
        												case 'B':
        												case 'C':
        												case 'D':
        												case 'E':
        												case 'F':
        												case 'G':
        												case 'H':
        												case 'I':
        												case 'J':
        												case 'K':
        												case 'L':
        												case 'M':
        												case 'N':
        												case 'O':
        												case 'P':
        												case 'Q':
        												case 'R':
        												case 'S':
        												case 'T':
        												case 'U':
        												case 'V':
        												case 'W':
        												case 'X':
        												case 'Y':
        												case 'Z':
        												case '_':
        												case 'a':
        												case 'b':
        												case 'c':
        												case 'd':
        												case 'e':
        												case 'f':
        												case 'g':
        												case 'h':
        												case 'i':
        												case 'j':
        												case 'k':
        												case 'l':
        												case 'm':
        												case 'n':
        												case 'o':
        												case 'p':
        												case 'q':
        												case 'r':
        												case 's':
        												case 't':
        												case 'u':
        												case 'v':
        												case 'w':
        												case 'x':
        												case 'y':
        												case 'z':
        													{
        														alt9=30;
        													}
        												    break;

        												default:
        												    alt9=17;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;
        		case 'e':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'a':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'd':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'o':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'n':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'l':
        													{
        														switch ( LA(8) ) 
        														{
        														case 'y':
        															{
        																switch ( LA(9) ) 
        																{
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt9=30;
        																	}
        																    break;

        																default:
        																    alt9=18;}

        															}
        														    break;

        														default:
        														    alt9=30;}

        													}
        												    break;

        												default:
        												    alt9=30;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;
        				case 'c':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'e':
        							{
        								switch ( LA(5) ) 
        								{
        								case 'i':
        									{
        										switch ( LA(6) ) 
        										{
        										case 'v':
        											{
        												switch ( LA(7) ) 
        												{
        												case 'e':
        													{
        														switch ( LA(8) ) 
        														{
        														case 's':
        															{
        																switch ( LA(9) ) 
        																{
        																case '0':
        																case '1':
        																case '2':
        																case '3':
        																case '4':
        																case '5':
        																case '6':
        																case '7':
        																case '8':
        																case '9':
        																case 'A':
        																case 'B':
        																case 'C':
        																case 'D':
        																case 'E':
        																case 'F':
        																case 'G':
        																case 'H':
        																case 'I':
        																case 'J':
        																case 'K':
        																case 'L':
        																case 'M':
        																case 'N':
        																case 'O':
        																case 'P':
        																case 'Q':
        																case 'R':
        																case 'S':
        																case 'T':
        																case 'U':
        																case 'V':
        																case 'W':
        																case 'X':
        																case 'Y':
        																case 'Z':
        																case '_':
        																case 'a':
        																case 'b':
        																case 'c':
        																case 'd':
        																case 'e':
        																case 'f':
        																case 'g':
        																case 'h':
        																case 'i':
        																case 'j':
        																case 'k':
        																case 'l':
        																case 'm':
        																case 'n':
        																case 'o':
        																case 'p':
        																case 'q':
        																case 'r':
        																case 's':
        																case 't':
        																case 'u':
        																case 'v':
        																case 'w':
        																case 'x':
        																case 'y':
        																case 'z':
        																	{
        																		alt9=30;
        																	}
        																    break;

        																default:
        																    alt9=19;}

        															}
        														    break;

        														default:
        														    alt9=30;}

        													}
        												    break;

        												default:
        												    alt9=30;}

        											}
        										    break;

        										default:
        										    alt9=30;}

        									}
        								    break;

        								default:
        								    alt9=30;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case ';':
        	{
        		alt9=20;
        	}
            break;
        case 'v':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'o':
        			{
        				switch ( LA(3) ) 
        				{
        				case 'i':
        					{
        						switch ( LA(4) ) 
        						{
        						case 'd':
        							{
        								switch ( LA(5) ) 
        								{
        								case '0':
        								case '1':
        								case '2':
        								case '3':
        								case '4':
        								case '5':
        								case '6':
        								case '7':
        								case '8':
        								case '9':
        								case 'A':
        								case 'B':
        								case 'C':
        								case 'D':
        								case 'E':
        								case 'F':
        								case 'G':
        								case 'H':
        								case 'I':
        								case 'J':
        								case 'K':
        								case 'L':
        								case 'M':
        								case 'N':
        								case 'O':
        								case 'P':
        								case 'Q':
        								case 'R':
        								case 'S':
        								case 'T':
        								case 'U':
        								case 'V':
        								case 'W':
        								case 'X':
        								case 'Y':
        								case 'Z':
        								case '_':
        								case 'a':
        								case 'b':
        								case 'c':
        								case 'd':
        								case 'e':
        								case 'f':
        								case 'g':
        								case 'h':
        								case 'i':
        								case 'j':
        								case 'k':
        								case 'l':
        								case 'm':
        								case 'n':
        								case 'o':
        								case 'p':
        								case 'q':
        								case 'r':
        								case 's':
        								case 't':
        								case 'u':
        								case 'v':
        								case 'w':
        								case 'x':
        								case 'y':
        								case 'z':
        									{
        										alt9=30;
        									}
        								    break;

        								default:
        								    alt9=22;}

        							}
        						    break;

        						default:
        						    alt9=30;}

        					}
        				    break;

        				default:
        				    alt9=30;}

        			}
        		    break;

        		default:
        		    alt9=30;}

        	}
            break;
        case '{':
        	{
        		alt9=23;
        	}
            break;
        case '[':
        	{
        		alt9=24;
        	}
            break;
        case '(':
        	{
        		alt9=25;
        	}
            break;
        case '}':
        	{
        		alt9=26;
        	}
            break;
        case ']':
        	{
        		alt9=27;
        	}
            break;
        case ')':
        	{
        		alt9=28;
        	}
            break;
        case '.':
        	{
        		alt9=29;
        	}
            break;
        case 'A':
        case 'B':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'H':
        case 'I':
        case 'J':
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
        case 'T':
        case 'U':
        case 'V':
        case 'W':
        case 'X':
        case 'Y':
        case 'Z':
        case '_':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'q':
        case 't':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
        	{
        		alt9=30;
        	}
            break;
        case '/':
        	{
        		alt9=31;
        	}
            break;
        case '<':
        	{
        		switch ( LA(2) ) 
        		{
        		case 'c':
        			{
        				switch ( LA(3) ) 
        				{
        				case '+':
        					{
        						alt9=32;
        					}
        				    break;
        				case ' ':
        				case ',':
        				case '.':
        				case '/':
        				case '0':
        				case '1':
        				case '2':
        				case '3':
        				case '4':
        				case '5':
        				case '6':
        				case '7':
        				case '8':
        				case '9':
        				case ':':
        				case '>':
        				case 'A':
        				case 'B':
        				case 'C':
        				case 'D':
        				case 'E':
        				case 'F':
        				case 'G':
        				case 'H':
        				case 'I':
        				case 'J':
        				case 'K':
        				case 'L':
        				case 'M':
        				case 'N':
        				case 'O':
        				case 'P':
        				case 'Q':
        				case 'R':
        				case 'S':
        				case 'T':
        				case 'U':
        				case 'V':
        				case 'W':
        				case 'X':
        				case 'Y':
        				case 'Z':
        				case '_':
        				case 'a':
        				case 'b':
        				case 'c':
        				case 'd':
        				case 'e':
        				case 'f':
        				case 'g':
        				case 'h':
        				case 'i':
        				case 'j':
        				case 'k':
        				case 'l':
        				case 'm':
        				case 'n':
        				case 'o':
        				case 'p':
        				case 'q':
        				case 'r':
        				case 's':
        				case 't':
        				case 'u':
        				case 'v':
        				case 'w':
        				case 'x':
        				case 'y':
        				case 'z':
        					{
        						alt9=33;
        					}
        				    break;

        				default:
        				    CONSTRUCTEX();
        				    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        				    EXCEPTION->message      = (void *)"";
        				    EXCEPTION->decisionNum  = 9;
        				    EXCEPTION->state        = 50;


        				    goto ruleTokensEx;
        				}

        			}
        		    break;
        		case ' ':
        		case ',':
        		case '.':
        		case '/':
        		case '0':
        		case '1':
        		case '2':
        		case '3':
        		case '4':
        		case '5':
        		case '6':
        		case '7':
        		case '8':
        		case '9':
        		case ':':
        		case '>':
        		case 'A':
        		case 'B':
        		case 'C':
        		case 'D':
        		case 'E':
        		case 'F':
        		case 'G':
        		case 'H':
        		case 'I':
        		case 'J':
        		case 'K':
        		case 'L':
        		case 'M':
        		case 'N':
        		case 'O':
        		case 'P':
        		case 'Q':
        		case 'R':
        		case 'S':
        		case 'T':
        		case 'U':
        		case 'V':
        		case 'W':
        		case 'X':
        		case 'Y':
        		case 'Z':
        		case '_':
        		case 'a':
        		case 'b':
        		case 'd':
        		case 'e':
        		case 'f':
        		case 'g':
        		case 'h':
        		case 'i':
        		case 'j':
        		case 'k':
        		case 'l':
        		case 'm':
        		case 'n':
        		case 'o':
        		case 'p':
        		case 'q':
        		case 'r':
        		case 's':
        		case 't':
        		case 'u':
        		case 'v':
        		case 'w':
        		case 'x':
        		case 'y':
        		case 'z':
        			{
        				alt9=33;
        			}
        		    break;

        		default:
        		    CONSTRUCTEX();
        		    EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
        		    EXCEPTION->message      = (void *)"";
        		    EXCEPTION->decisionNum  = 9;
        		    EXCEPTION->state        = 27;


        		    goto ruleTokensEx;
        		}

        	}
            break;
        case '\t':
        case '\n':
        case '\r':
        case ' ':
        	{
        		alt9=34;
        	}
            break;

        default:
            CONSTRUCTEX();
            EXCEPTION->type         = ANTLR3_NO_VIABLE_ALT_EXCEPTION;
            EXCEPTION->message      = (void *)"";
            EXCEPTION->decisionNum  = 9;
            EXCEPTION->state        = 0;


            goto ruleTokensEx;
        }

        switch (alt9) 
        {
    	case 1:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:10: ATTRIBUTE
    	    {
    	        /* 1:10: ATTRIBUTE */
    	        mATTRIBUTE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 2:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:20: BASIC_TYPE
    	    {
    	        /* 1:20: BASIC_TYPE */
    	        mBASIC_TYPE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 3:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:31: CLASS
    	    {
    	        /* 1:31: CLASS */
    	        mCLASS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 4:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:37: CPP_SCOPE
    	    {
    	        /* 1:37: CPP_SCOPE */
    	        mCPP_SCOPE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 5:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:47: COLON
    	    {
    	        /* 1:47: COLON */
    	        mCOLON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 6:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:53: COMMA
    	    {
    	        /* 1:53: COMMA */
    	        mCOMMA(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 7:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:59: COMPONENT
    	    {
    	        /* 1:59: COMPONENT */
    	        mCOMPONENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 8:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:69: ENUM
    	    {
    	        /* 1:69: ENUM */
    	        mENUM(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 9:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:74: EXCEPTION_TOKEN
    	    {
    	        /* 1:74: EXCEPTION_TOKEN */
    	        mEXCEPTION_TOKEN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 10:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:90: IMPORT
    	    {
    	        /* 1:90: IMPORT */
    	        mIMPORT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 11:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:97: INTERFACE
    	    {
    	        /* 1:97: INTERFACE */
    	        mINTERFACE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 12:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:107: NATIVE
    	    {
    	        /* 1:107: NATIVE */
    	        mNATIVE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 13:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:114: TOK_IN
    	    {
    	        /* 1:114: TOK_IN */
    	        mTOK_IN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 14:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:121: TOK_INOUT
    	    {
    	        /* 1:121: TOK_INOUT */
    	        mTOK_INOUT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 15:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:131: TOK_OUT
    	    {
    	        /* 1:131: TOK_OUT */
    	        mTOK_OUT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 16:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:139: PROVIDES
    	    {
    	        /* 1:139: PROVIDES */
    	        mPROVIDES(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 17:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:148: RAISES
    	    {
    	        /* 1:148: RAISES */
    	        mRAISES(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 18:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:155: READONLY
    	    {
    	        /* 1:155: READONLY */
    	        mREADONLY(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 19:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:164: RECEIVES
    	    {
    	        /* 1:164: RECEIVES */
    	        mRECEIVES(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 20:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:173: SEMICOLON
    	    {
    	        /* 1:173: SEMICOLON */
    	        mSEMICOLON(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 21:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:183: STRUCT
    	    {
    	        /* 1:183: STRUCT */
    	        mSTRUCT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 22:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:190: TOK_VOID
    	    {
    	        /* 1:190: TOK_VOID */
    	        mTOK_VOID(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 23:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:199: OPEN_BLOCK
    	    {
    	        /* 1:199: OPEN_BLOCK */
    	        mOPEN_BLOCK(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 24:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:210: OPEN_BRACE
    	    {
    	        /* 1:210: OPEN_BRACE */
    	        mOPEN_BRACE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 25:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:221: OPEN_PAREN
    	    {
    	        /* 1:221: OPEN_PAREN */
    	        mOPEN_PAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 26:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:232: CLOSE_BLOCK
    	    {
    	        /* 1:232: CLOSE_BLOCK */
    	        mCLOSE_BLOCK(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 27:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:244: CLOSE_BRACE
    	    {
    	        /* 1:244: CLOSE_BRACE */
    	        mCLOSE_BRACE(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 28:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:256: CLOSE_PAREN
    	    {
    	        /* 1:256: CLOSE_PAREN */
    	        mCLOSE_PAREN(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 29:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:268: DOT
    	    {
    	        /* 1:268: DOT */
    	        mDOT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 30:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:272: ID
    	    {
    	        /* 1:272: ID */
    	        mID(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 31:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:275: COMMENT
    	    {
    	        /* 1:275: COMMENT */
    	        mCOMMENT(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 32:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:283: CPP_BLOCK
    	    {
    	        /* 1:283: CPP_BLOCK */
    	        mCPP_BLOCK(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 33:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:293: CPP_TAG
    	    {
    	        /* 1:293: CPP_TAG */
    	        mCPP_TAG(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;
    	case 34:
    	    // /Users/tbastos/Projects/coral/src/core/csl/CSL.g:1:301: WS
    	    {
    	        /* 1:301: WS */
    	        mWS(ctx ); 
    	        if  (HASEXCEPTION())
    	        {
    	            goto ruleTokensEx;
    	        }


    	    }
    	    break;

        }
    }

    
    goto ruleTokensEx; /* Prevent compiler warnings */
ruleTokensEx: ;
}

/* =========================================================================
 * Lexer matching rules end.
 * =========================================================================
 */
/* End of Lexer code
 * ================================================
 * ================================================
 */ 


/* End of code
 * =============================================================================
 */
