/*
	A set of custom extensions loaded from a namespace in the Coral path.
	Modules are composed of one or more IModulePart's, which are individual
	extensions loaded from artifacts in the module directory.
 */
interface IModule
{
	// Namespace from which the module was loaded. Indicates the module's location in the Coral path.
	readonly INamespace namespace;

	// Current module state. See the module life cycle control methods below.
	readonly ModuleState state;

	// List of ModuleParts that comprise this module.
	readonly IModulePart[] parts;

	/*
		Affects the order in which a module is notified of state changes.
		Modules are sorted by increasing rank value. The default rank is zero.
	 */
	int32 rank;

	//---------- Life Cycle Control Methods ----------//

	/*
		Runs the initialization phase on all module parts and leaves the module
		in the ModuleState_Initialized state.

		The module's state must be ModuleState_None when this method is called,
		or a IllegalStateException will be raised.
	 */
	void initialize() raises IllegalStateException;

	/*
		Runs the integration phase on all module parts and leaves the module
		in the ModuleState_Integrated state.

		The module's state must be ModuleState_Initialized when this method
		is called, or a IllegalStateException will be raised.
	 */
	void integrate() raises IllegalStateException, MissingServiceException;

	/*
		Runs the presentation integration phase on all module parts and leaves the
		module in the ModuleState_PresentationIntegrated state.

		The module's state must be ModuleState_Integrated when this method is called,
		or a IllegalStateException will be raised.
	 */
	void integratePresentation() raises IllegalStateException;

	/*
		Runs the disintegration phase on all module parts and leaves the module
		in the ModuleState_Disintegrated state.

		The module's state must be ModuleState_PresentationIntegrated when this
		method is called, or a IllegalStateException will be raised.
	 */
	void disintegrate() raises IllegalStateException;

	/*
		Runs the disposal phase on all module parts, unloads all module parts,
		then leaves the module in the ModuleState_Disposed state.

		The module's state must be ModuleState_Disintegrated when this method
		is called, or a IllegalStateException will be raised.
	 */
	void dispose() raises IllegalStateException;

	/*
		Runs the disintegration and/or disposal phase on this module,
		leaving it in the ModuleState_Aborted state.

		Please notice that the disintegration phase is only run if the
		integration phase had run successfully for the module.

		The module's state must preceed ModuleState_Disintegrated when this
		method is called, or a IllegalStateException will be raised.
	 */
	void abort() raises IllegalStateException;

	//---------- End of Life Cycle Control Methods -------------------//
};
