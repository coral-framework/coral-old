/*
	A generic builder of Coral Types.
 */
interface TypeBuilder
{
	// Namespace where the new type should be placed when it's created.
	readonly attribute Namespace namespace;

	// TypeKind of the type under construction by this builder.
	readonly attribute TypeKind kind;

	// The future name of the type when it's created.
	readonly attribute string typeName;

	/*
		Adds an identifier to an EnumType.
		\note Values are assigned implicitly: the first defined identifier is zero, and so forth.
		\throw UnsupportedOperationException if the builder's kind is not TK_ENUM or if the type was already created.
		\throw IllegalNameException if the passed \c name is not a valid identifier or clashes with other members.
	 */
	void defineIdentifier( in string name )
		raises UnsupportedOperationException, IllegalNameException;

	/*
		Adds an attribute to a StructType, NativeClassType or InterfaceType.
		\throw UnsupportedOperationException if the builder's kind is neither TK_STRUCT, TK_NATIVECLASS nor TK_INTERFACE or if the type was already created.
		\throw IllegalNameException if the passed \c name is not a valid identifier.
		\throw IllegalArgumentException if the passed \c type is invalid (e.g. null or the type is a component or exception) or
			   if the passed \c isReadOnly modifier is \c true and the builder's kind is TK_STRUCT (structs are always writable).
		\throw IllegalNameException  if the passed \c name clashes with other members.
	 */
	void defineAttribute( in string name, in Type type, in bool isReadOnly )
		raises UnsupportedOperationException, IllegalNameException, IllegalArgumentException;

	/*
		Adds a parent interface to an InterfaceType.
		\throw UnsupportedOperationException if the builder's kind is not TK_INTERFACE or if the type was already created.
		\throw IllegalArgumentException if the passed \c superType is invalid (e.g. not an InterfaceType) or already a super interface.
	 */
	void defineSuperType( in Type superType )
		raises UnsupportedOperationException, IllegalArgumentException;

	/*
		Adds an interface to a ComponentType.
		\throw UnsupportedOperationException if the builder's kind is not TK_COMPONENT or if the type was already created.
		\throw IllegalNameException if the passed \c name is not a valid identifier or clashes with other members.
		\throw IllegalArgumentException if the passed \c interfaceType is invalid (e.g. null).
	 */
	void defineInterface( in string name, in InterfaceType interfaceType, in bool isFacet )
		raises UnsupportedOperationException, IllegalNameException, IllegalArgumentException;

	/*
		Adds a method to a NativeClassType or InterfaceType.
		\note The method is only really added when co::MethodBuilder::createMethod() is called.
		\throw UnsupportedOperationException if the builder's kind is neither TK_NATIVECLASS nor TK_INTERFACE or if the type was already created.
		\throw IllegalNameException if the passed \c name is not a valid identifier.
		\throw IllegalNameException  if the passed \c name clashes with other members.
	 */
	MethodBuilder defineMethod( in string name )
		raises UnsupportedOperationException, IllegalNameException;

	/*
		Defines the parameters to create a NativeClassType.
		\throw UnsupportedOperationException if the builder's kind is not TK_NATIVECLASS or if the type was already created.
		\throw IllegalArgumentException if the passed \c nativeHeaderFile or \c nativeName parameters are empty.
	 */
	void defineNativeClass( in string nativeHeaderFile,  in string nativeName )
		raises UnsupportedOperationException, IllegalNameException;

	/*
		Fills the Type with all the definitions set and returns it.
		This method should be called only once and after all definitions have been set.
		\throw UnsupportedOperationException if the type is already created.
		\throw MissingInputException if not all required definitions were set for this builder's type kind.
	 */
	Type createType() raises MissingInputException;
};
