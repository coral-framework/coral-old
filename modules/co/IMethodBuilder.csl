/*
	Works in conjunction with an ITypeBuilder to define methods for new types.
 */
interface IMethodBuilder
{
	// The ITypeBuilder to which this method builder belongs to.
	readonly ITypeBuilder typeBuilder;

	// The future name of the method when it's created.
	readonly string methodName;

	/*
		Defines the return type of the method.

		\throw IllegalArgumentException if the passed \a type is invalid (e.g. null).
		\throw NotSupportedException if the method's return type was already defined.
		\throw NotSupportedException if the class type was already created.
	 */
	void defineReturnType( in IType type )
		raises IllegalArgumentException, NotSupportedException;

	/*
		Adds a method parameter.

		\throw IllegalNameException if \a name is not a valid identifier or clashes with other parameters.
		\throw IllegalArgumentException if \a type is invalid (e.g. null) or both input and output are false.
		\throw NotSupportedException if the class type was already created.
	 */
	void defineParameter( in string name, in IType type, in bool input, in bool output )
		raises IllegalNameException, IllegalArgumentException, NotSupportedException;

	/*
		Adds an exception that can be raised by the method.

		\throw IllegalArgumentException if the passed \a exceptionType is invalid (e.g. null).
		\throw NotSupportedException if the class type was already created.
	 */
	void defineException( in IException exceptionType )
		raises IllegalArgumentException, NotSupportedException;

	/*
		Finishes adding a method to the ITypeBuilder that owns this IMethodBuilder.

		\throw IllegalNameException if a member with a clashing name was meanwhile added to the type.
		\throw NotSupportedException if the class type was already created.
	 */
	void createMethod() raises IllegalNameException, NotSupportedException;
};
