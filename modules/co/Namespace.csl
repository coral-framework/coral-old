/*
	A namespace in the type hierarchy. It may contain types and child namespaces.
 */
interface Namespace
{
	// The namespace's local name (or "", if this is the global namespace).
	readonly attribute string name;

	// The namespace's fully qualified name (or "", if this is the global namespace).
	readonly attribute string fullName;

	// The namespace's parent namespace (or null, if this is the global namespace).
	readonly attribute Namespace parentNamespace;

	// List of child namespaces.
	readonly attribute Namespace[] childNamespaces;

	// List of types defined in this namespace.
	readonly attribute Type[] types;

	// The namespace's Module, if one was loaded (otherwise, null).
	readonly attribute Module module;

	/*
		Retrieves a type by name (case sensitive).
		Returns null if there is no type in this namespace with the given name.
	 */
	Type getType( in string name );

	/*
		Retrieves a child namespace by name (case sensitive).
		Returns null if there is no child namespace with the given name.
	 */
	Namespace getChildNamespace( in string name );

	/*
		Creates a TypeBuilder to instantiate a type in this namespace.
		\throw IllegalNameException if the passed \c name is not a valid identifier or clashes with an existing type or child namespace.
		\throw IllegalArgumentException if the passed \c typeKind is not a user-definable type kind
					(TK_ARRAY, TK_ENUM, TK_EXCEPTION, TK_STRUCT, TK_NATIVECLASS, TK_INTERFACE or TK_COMPONENT).
	 */
	TypeBuilder defineType( in string name, in TypeKind typeKind, in TypeCreationTransaction transaction )
		raises IllegalNameException, IllegalArgumentException;

	/*
		Creates a child namespace with the specified name.
		\throw IllegalNameException if the passed \c name is not a valid identifier or clashes with an existing type or child namespace.
	 */
	Namespace defineChildNamespace( in string name ) raises IllegalNameException;
};
