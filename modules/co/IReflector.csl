/*
	Provides reflective programming facilities for a \ref co::IType "type".
 */
interface IReflector
{
	// The type we are providing reflection for.
	readonly IType type;

	// Number of bytes occupied by instances of this type.
	readonly uint32 size;

	<c++
		//------ Manipulation of Values (only available from C++) ------//

		/*!
			Constructs an array of values in the memory area starting at \a ptr.
			\pre The memory area at \a ptr should be at least \a numValues * \a size bytes big.
			\throw NotSupportedException if this \a type does not have a value form.
		 */
		virtual void createValues( void* ptr, size_t numValues ) = 0;

		/*!
			Copies an array of \a numValues values from \a fromPtr to \a toPtr.
			\note Each copy is done using the value's assignment operator.
			\pre Both arrays must contain at least \a numValues properly constructed values of this type.
			\throw NotSupportedException if this \a type does not have a value form.
		 */
		virtual void copyValues( const void* fromPtr, void* toPtr, size_t numValues ) = 0;

		/*!
			Destructs an array of \a numValues values starting at \a ptr.
			\pre The array must contain at least \a numValues values constructed with createValues().
			\throw NotSupportedException if this \a type does not have a value form.
		 */
		virtual void destroyValues( void* ptr, size_t numValues ) = 0;

		/*!
			Returns true if and only if a0 == b0, a1 == b1, ... aN == bN.
			\throw NotSupportedException if this \a type does not have a value form.
		 */
		virtual bool compareValues( const void* a, const void* b, size_t numValues ) = 0;
	c++>

	/*
		Instantiates a component.
		\throw NotSupportedException if \a type is not component.
	 */
	IObject newInstance() raises NotSupportedException;

	/*
		Creates a dynamic service proxy that forwards all calls to a given \a dynamicProvider.

		A dynamic service proxy is a lightweight object (i.e. it is \e not a full component
		instance) that forwards all its calls to a \a dynamicProvider.

		\throw NotSupportedException if \a type is not an interface.
		\throw IllegalArgumentException if the \a dynamicProvider is invalid (e.g. null).
	 */
	IService newDynamicProxy( in IDynamicServiceProvider dynamicProvider )
		raises NotSupportedException, IllegalArgumentException;

	/*
		Gets the value of a field from a struct, interface or native class instance.
		\throw NotSupportedException if \a type is not a record type.
		\throw IllegalArgumentException if \a instance is not an instance of \a type.
		\throw IllegalArgumentException if the \a field does not belong to this \a type.
	 */
	void getField( in any instance, in IField field, in any value )
		raises NotSupportedException, IllegalArgumentException;

	/*
		Sets the value of a field in a struct, interface or native class instance.
		\throw NotSupportedException if \a type is not a record type.
		\throw IllegalArgumentException if \a instance is not an instance of \a type.
		\throw IllegalArgumentException if the \a field does not belong to this \a type.
		\throw IllegalArgumentException if the \a field is read-only.
		\throw IllegalCastException if \a value has no valid conversion to the actual type.
			Please refer to co::Any's documentation for more about type conversion rules.
	 */
	void setField( in any instance, in IField field, in any value )
		raises NotSupportedException, IllegalArgumentException, IllegalCastException;

	/*
		Invokes a \a method from an interface or native class \a instance.

		Method arguments are passed in the \a args array, in the same order they are expected
		by the callee. If \a args contains more arguments than the number of method
		parameters, the excess arguments are ignored. However, if \a args contains fewer
		arguments than the number of parameters, a MissingInputException is raised.

		Method return values are obtainable through the \a returnValue argument. Notice that
		you must \e always pass a co::Any at this parameter, even when the callee is a \c void
		method (in this case, the \a returnValue parameter will return unmodified).

		\throw NotSupportedException if \a type is not a class type.
		\throw IllegalArgumentException if \a instance is not an instance of \a type.
		\throw IllegalArgumentException if the \a method does not belong to this \a type.
		\throw MissingInputException if \a args contains fewer elements than the number of method parameters.
		\throw IllegalCastException if one of the arguments in \a args has no valid conversion to the actual
			parameter type. Please refer to co::Any's documentation for more about type conversion rules.
	 */
	void invoke( in any instance, in IMethod method, in any[] args, in any returnValue )
		raises NotSupportedException, IllegalArgumentException, MissingInputException, IllegalCastException;

	/*
		Raises an exception with the given \a message.
		\throw NotSupportedException if \a type is not an exception.
	 */
	void raise( in string message ) raises NotSupportedException;
};
