/*
	Provides reflective programming facilities for a \ref co::IType "type".
 */
interface IReflector
{
	// The type we are providing reflection for.
	readonly IType type;

	// Number of bytes occupied by instances of this type.
	readonly int32 size;

	<c++
		//------ Manipulation of complex value instances (only available from C++) ------//

		/*!
			Constructs an instance of a struct or native class in the specified memory area.
			\param[in] address memory address where the instance is to be constructed.
			\param[in] length number of bytes (starting at \a address) reserved for the instance.
			\throw IllegalArgumentException if the passed \a length is not equal to the type's \a size.
			\throw NotSupportedException if the \a type is neither a struct nor a native class.
		 */
		virtual void createValue( void* address, size_t length ) = 0;

		/*!
			Sets the complex value at \a toAddress with a copy of the complex value at \a fromAddress.
			The copy is done using the type's assignment operator.
			\warning Both pointers must point to instances of this exact type.
		 */
		virtual void copyValue( const void* fromAddress, void* toAddress ) = 0;

		/*!
			Destroys the struct or native class instance located at \a address.
			The instance should have been constructed using createValue().
			\warning Expect the worst if \a address does not point to an instance of this type.
			\throw NotSupportedException if the \a type is neither a struct nor a native class.
		 */
		virtual void destroyValue( void* address ) = 0;
	c++>

	/*
		Instantiates a component.
		\throw NotSupportedException if the \a type is not component.
	 */
	IObject newInstance() raises NotSupportedException;

	/*
		Creates a dynamic service proxy that forwards all calls to a given \a dynamicProvider.

		A dynamic service proxy is a lightweight object (i.e. it is \e not a full component
		instance) that forwards all its calls to a \a dynamicProvider.

		\throw NotSupportedException if the \a type is not an interface.
		\throw IllegalArgumentException if the \a dynamicProvider is invalid (e.g. null).
	 */
	IService newDynamicProxy( in IDynamicServiceProvider dynamicProvider )
		raises NotSupportedException, IllegalArgumentException;

	/*
		Gets the value of a field from a struct, interface or native class instance.
		\throw NotSupportedException if the \a type is not a record type.
		\throw IllegalArgumentException if \a instance is not an instance of \a type.
		\throw IllegalArgumentException if the \a field does not belong to this \a type.
	 */
	void getField( in any instance, in IField field, out any value )
		raises NotSupportedException, IllegalArgumentException;

	/*
		Sets the value of a field in a struct, interface or native class instance.
		\throw NotSupportedException if the \a type is not a record type.
		\throw IllegalArgumentException if \a instance is not an instance of \a type.
		\throw IllegalArgumentException if the \a field does not belong to this \a type.
		\throw IllegalArgumentException if the \a field is read-only.
		\throw IllegalCastException if \a value has no valid conversion to the actual type.
			Please refer to co::Any's documentation for more about type conversion rules.
	 */
	void setField( in any instance, in IField field, in any value )
		raises NotSupportedException, IllegalArgumentException, IllegalCastException;

	/*
		Invokes a \a method from an interface or native class \a instance.

		Method arguments are passed in the \a args array, in the same order they are expected
		by the callee. If \a args contains more arguments than the number of method
		parameters, the excess arguments are ignored. However, if \a args contains fewer
		arguments than the number of parameters, a MissingInputException is raised.

		Method return values are obtainable through the \a returnValue argument. Notice that
		you must \e always pass a co::Any at this parameter, even when the callee is a \c void
		method (in this case, the \a returnValue parameter will return unmodified).

		\throw NotSupportedException if the \a type is not a class type.
		\throw IllegalArgumentException if \a instance is not an instance of \a type.
		\throw IllegalArgumentException if the \a method does not belong to this \a type.
		\throw MissingInputException if \a args contains fewer elements than the number of method parameters.
		\throw IllegalCastException if one of the arguments in \a args has no valid conversion to the actual
			parameter type. Please refer to co::Any's documentation for more about type conversion rules.
	 */
	void invoke( in any instance, in IMethod method, in any[] args, out any returnValue )
		raises NotSupportedException, IllegalArgumentException, MissingInputException, IllegalCastException;

	/*
		Raises an exception with the given \a message.
		\throw NotSupportedException if the \a type is not an exception.
	 */
	void raise( in string message ) raises NotSupportedException;
};
