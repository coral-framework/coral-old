/*
	Manages the system's services database, providing contextualized service lookups.

	A module may publish services with the IServiceManager in order to make
	them available for consumption by other modules.

	Services are always identified by their IInterface type. A service may be published as either
	the global provider of a certain type of service (e.g. using addService()), or as a specialized
	service provider for clients of a certain interface type (e.g. using addServiceForType()).
	Whenever a service is published twice, the latest provided instance replaces the pre-existing one.

	The service manager supports three kinds of lookups:
		- Lookup by <tt>service type</tt>: getService().
		- Lookup by <tt>service type + client <b>type</b></tt>: getServiceForType().
		- Lookup by <tt>service type + client <b>instance</b></tt>: getServiceForInstance().
 */
interface IServiceManager
{
	// Whether services are allowed to be lazy-instantiated. Default is true.
	bool isLazy;

	/*
		Publishes \a service as the global provider of \a serviceType.

		\throw IllegalArgumentException if any of the arguments are null.
		\throw IllegalCastException if \a service does not provide the specified \a serviceType.
	 */
	void addService( in IInterface serviceType, in IService service )
			raises IllegalArgumentException, IllegalCastException;

	/*
		Publishes \a service as a custom provider of \a serviceType for clients of type \a clientType.

		\throw IllegalArgumentException if any arguments are null.
		\throw IllegalCastException if \a service does not provide the specified \a serviceType.
	 */
	void addServiceForType( in IInterface serviceType, in IInterface clientType, in IService service )
			raises IllegalArgumentException, IllegalCastException;

	/*
		Publishes a global provider of \a serviceType with lazy instantiation.

		The service is immediately declared as available, but its instance is not created until
		the service is requested (unless the \a isLazy is currently set to \a false).

		To create the service instance, this manager will attempt to instantiate a component using
		the given \a componentName and get its facet of type \a serviceType. If an error occurs,
		the service will be removed and the calling method will raise a MissingServiceException.

		\throw IllegalArgumentException if any arguments are null or \a componentName is not a valid component.
		\throw NoSuchPortException if the component does not provide a facet of type \a serviceType.
		\throw MissingServiceException if \a isLazy is \a false and the service cannot be instantiated.
	 */
	void addServiceProvider( in IInterface serviceType, in string componentName )
			raises IllegalArgumentException, NoSuchPortException, MissingServiceException;

	/*
		Publishes a custom provider of \a serviceType for clients of type \a clientType, with lazy instantiation.

		The service is immediately declared as available, but its instance creation is delayed until
		the service is requested (unless the \a isLazy is currently set to \a false).

		To create the service instance, this manager will attempt to instantiate a component using
		the given \a componentName and get its facet of type \a serviceType. If an error occurs,
		the service will be removed and the calling method will raise a MissingServiceException.

		\throw IllegalArgumentException if any arguments are null or \a componentName is not a valid component.
		\throw NoSuchPortException if the component does not provide a facet of type \a serviceType.
		\throw MissingServiceException if \a isLazy is \a false and the service cannot be instantiated.
	 */
	void addServiceProviderForType( in IInterface serviceType, in IInterface clientType, in string componentName )
			raises IllegalArgumentException, NoSuchPortException, MissingServiceException;

	/*
		Gets the global provider of the specified \a serviceType.

		\throw IllegalArgumentException if serviceType is null.
		\throw MissingServiceException if no global instance of \a serviceType is available.
	 */
	IService getService( in IInterface serviceType )
			raises IllegalArgumentException, MissingServiceException;

	/*
		Gets the most appropriate provider of \a serviceType for clients of the specified \a clientType.

		If a service instance was not specifically added for the \a clientType, this method will pick
		the first service instance available for a super-type of \a clientType (by doing a depth-first
		search in the list of superInterfaces of \a clientType). Finally, if no specialized instance
		is available for \a clientType, this method will return the global provider of \a serviceType.

		\throw IllegalArgumentException if any of the arguments are null.
		\throw MissingServiceException if no suitable instance of \a serviceType is available for \a clientType.
	 */
	IService getServiceForType( in IInterface serviceType, in IInterface clientType )
			raises IllegalArgumentException, MissingServiceException;

	/*
		Gets the most appropriate provider of \a serviceType for the given \a clientInstance.

		This method first checks if the \a clientInstance's component provides an interface of
		type \a serviceType. If so, such interface is returned. Otherwise, this method behaves
		like a call to <tt>getServiceForType( service, client->getInterface() )</tt>.

		\throw IllegalArgumentException if any of the arguments are null.
		\throw MissingServiceException if no suitable instance of \a serviceType could be found.
	 */
	IService getServiceForInstance( in IInterface serviceType, in IService client )
			raises IllegalArgumentException, MissingServiceException;

	/*
		Removes the global instance of the specified \a serviceType.
		\throw MissingServiceException if no global instance of \a serviceType was found.
	 */
	void removeService( in IInterface serviceType ) raises MissingServiceException;

	/*
		Removes the custom instance of \a serviceType that was published for \a clientType.
		\throw MissingServiceException if no matching service instance was found.
	 */
	void removeServiceForType( in IInterface serviceType, in IInterface clientType )
			raises MissingServiceException;
};
