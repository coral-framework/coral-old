/*
	A generic builder of Coral Types.
 */
interface ITypeBuilder
{
	// Namespace where the new type should be placed when it's created.
	readonly INamespace namespace;

	// Kind of type under construction by this builder.
	readonly TypeKind kind;

	// The future name of the type when it's created.
	readonly string typeName;

	/*
		Adds an identifier to an enum.

		Values are assigned implicitly: the first identifier's value is zero, the second
		identifier's value is one, and so forth.

		\throw NotSupportedException if the builder's type was already created, or is not an enum.
		\throw IllegalNameException if \a name is not a valid identifier or clashes with other members.
	 */
	void defineIdentifier( in string name ) raises NotSupportedException, IllegalNameException;

	/*
		Adds a field to a record type (struct, interface or native class).

		\throw NotSupportedException if the builder's type was already created, or is not a record type.
		\throw IllegalNameException if \a name is not a valid identifier.
		\throw IllegalArgumentException if \a type is invalid (NULL, a component or an exception).
		\throw IllegalArgumentException if \a isReadOnly is \a true and the builder's kind is TK_STRUCT.
		\throw IllegalNameException if \a name clashes with other members.
	 */
	void defineField( in string name, in IType type, in bool isReadOnly )
		raises NotSupportedException, IllegalNameException, IllegalArgumentException;

	/*
		Adds a method to a class type (interface or native class).

		\note The method is only really added when IMethodBuilder::createMethod() is called.

		\throw NotSupportedException if the builder's type was already created, or is not a class type.
		\throw IllegalNameException if \a name is not a valid identifier.
		\throw IllegalNameException  if \a name clashes with other members.
	 */
	IMethodBuilder defineMethod( in string name ) raises NotSupportedException, IllegalNameException;

	/*
		Adds a port to a component.

		\throw NotSupportedException if the builder's type was already created, or is not a component.
		\throw IllegalNameException if \a name is not a valid identifier or clashes with other members.
		\throw IllegalArgumentException if \a type is invalid (e.g. NULL).
	 */
	void definePort( in string name, in IInterface type, in bool isFacet )
		raises NotSupportedException, IllegalNameException, IllegalArgumentException;

	/*
		Makes a type inherit from a \a baseType.

		\throw NotSupportedException if the builder's type was already created, or does not support inheritance.
		\throw NotSupportedException if a base type was already defined.
		\throw IllegalArgumentException if \a baseType is invalid.
	 */
	void defineBaseType( in IType baseType )
		raises NotSupportedException, IllegalArgumentException;

	/*
		Fills required information about a native class.

		\throw NotSupportedException if the builder's type was already created, or is not a native class.
		\throw IllegalArgumentException if any arguments are empty.
	 */
	void defineNativeClass( in string nativeHeader,  in string nativeName )
		raises NotSupportedException, IllegalNameException;

	/*
		Finishes building the type and returns it.
		This method must be called only once, after all definitions have been set.

		\throw NotSupportedException if the builder's type was already created.
		\throw MissingInputException if not all required definitions were set for this builder's type.
	 */
	IType createType() raises MissingInputException;
};
