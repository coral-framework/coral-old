/*
	Manager responsible for loading and maintaining the life cycle of all modules.

	The \ref ISystem::modules "system's module manager" starts with a built-in IModulePartLoader
	that loads native libraries. Loaded modules may install additional IModulePart loaders
	in order to enable modules based on other kinds of artifacts (e.g. script files).
 */
interface IModuleManager
{
	// List of all loaded modules.
	readonly IModule[] modules;

	// List of installed IModulePart loaders.
	readonly IModulePartLoader[] loaders;

	/*
		If true (default), the built-in IModulePartLoader will protect application by checking
		whether native modules are binary-compatible with the Coral core and installed types.
		When false, applications are able to load incompatible modules, but will subject to
		sudden crashes due to ABI incompatibilities.
	 */
	bool binaryCompatibilityChecking;

	/*
		Finds an already loaded module given its fully-qualified \a moduleName.
		If the module was not previously loaded, returns null.
	 */
	IModule findModule( in string moduleName );

	/*
		Installs a new IModulePartLoader.
		\throw IllegalArgumentException if the loader is invalid.
	 */
	void installLoader( in IModulePartLoader loader );

	/*
		Uninstalls a currently installed IModulePartLoader.
		\throw IllegalArgumentException if the loader is not currently installed.
	 */
	void uninstallLoader( in IModulePartLoader loader );

	/*
		Returns whether \a moduleName identifies a potentially loadable module
		(that is, whether one of the installed loaders identified a loadable artifact
		within the module's directory).

		Please notice that a positive result <b>does not</b> mean that load() will
		succeed for the given module.
	 */
	bool isLoadable( in string moduleName );

	/*
		Loads or retrieves the module with the given fully-qualified \a moduleName.

		If the specified module is not loaded and none of the installed loaders
		is able to load it, a ModuleLoadException will be raised.

		When a module is loaded, it is brought up to date with the current state
		of the system. If an exception is thrown by the module or an error is
		detected during this process, the module will be unloaded and marked as
		aborted (ModuleState_Aborted), and a ModuleLoadException will be raised.

		Attempts to load a module that was previously marked as aborted will
		immediately raise a ModuleLoadException.

		This method can only be used after the system is set up, and only if it
		is not being torn down; otherwise, a IllegalStateException will be raised.
	 */
	IModule load( in string moduleName ) raises ModuleLoadException, IllegalStateException;
};
