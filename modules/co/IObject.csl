/*
	Basic service provided by all components through the implicit "object" facet.
 */
interface IObject
{
	// The concrete type of this component instance.
	readonly IComponent component;

	<c++
		/*!
			Attempts to retrieve a service of a certain type from this object.
			\tparam T interface type of the requested service.
			\return NULL if this object does not provide the requested service.
		 */
		template<typename T> inline T* findService()
		{
			return static_cast<T*>( findServiceByType( this, typeOf<T>::get() ) );
		}

		/*!
			Retrieves a service of a certain type from this object.
			\tparam T interface type of the requested service.
			\throw NoSuchPortException if this object does not provide the requested service.
		 */
		template<typename T> inline T* getService()
		{
			return static_cast<T*>( getServiceByType( this, typeOf<T>::get() ) );
		}

		/*!
			Attempts to retrieve the service at port \a portName in this object.
			\return NULL if this object has no port named \a portName
					(note that NULL can also be returned for receptacles).
		 */
		inline IService* findService( const std::string& portName )
		{
			return findServiceByName( this, portName );
		}

		/*!
			Retrieve the service at port \a portName in this object.
			\throw NoSuchPortException if this object has no port named \a portName.
		 */
		inline IService* getService( const std::string& portName )
		{
			return getServiceByName( this, portName );
		}

		// Binds a \a service to the receptacle named \a receptacleName.
		inline void setService( const std::string& receptacleName, IService* service )
		{
			setServiceByName( this, receptacleName, service );
		}
	c++>

	/*
		Returns the service "provided by" or "bound to" one of this object's ports.

		If \a port is a \e facet, this method returns the corresponding service \e provided \e by
		this component instance. Otherwise, if \a port is a \e receptacle, this method returns the
		service currently \e bound \e to the receptacle (null indicates no service is bound).

		\throw NoSuchPortException if \a port is invalid.
	 */
	IService getServiceAt( in IPort port ) raises NoSuchPortException;

	/*
		Binds a \a service to one of this object's receptacles.

		\throw NoSuchPortException if \a receptacle is not a valid receptacle.
		\throw IllegalCastException if \a service is incompatible with the \a receptacle.
		\throw IllegalStateException if \a receptacle cannot be changed in the current object state.
	 */
	void setServiceAt( in IPort receptacle, in IService service )
		raises NoSuchPortException, IllegalCastException, IllegalStateException;
};
