/*
	Basic service provided by all components through the implicit "object" facet.
 */
interface IObject
{
	// The concrete type of this component instance.
	readonly IComponent component;

	<c++
		/*!
			<tt>getService<T>()</tt>: convenience method that returns a built-in service of type 'T'
			provided by the component. Please notice that this method only works for static facets.
			It will not retrieve services from dynamic facets, such as those implemented in Lua.
		 */
		template<typename T> inline T* getService() { return dynamic_cast<T*>( this ); }
	c++>

	/*
		Retrieves the service "provided by" or "bound to" one of this object's ports.

		If \a port is a \e facet, this method returns the corresponding service <em>provided by</em>
		the component. Otherwise, if \a port is a \e receptacle, this method returns the service that
		is currently <em>bound to</em> the receptacle (null indicates no service is bound).

		\throw NoSuchPortException if the \a port is invalid.
	 */
	IService getService( in IPort port ) raises NoSuchPortException;

	/*
		Binds a \a service to one of this object's receptacles.

		\throw NoSuchPortException if \a receptacle is not a valid component receptacle.
		\throw IllegalCastException if \a service is incompatible with the \a receptacle.
		\throw IllegalStateException if \a receptacle cannot be changed in the current object state.
	 */
	void setService( in IPort receptacle, in IService service )
		raises NoSuchPortException, IllegalCastException, IllegalStateException;
};
