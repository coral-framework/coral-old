/*
	Basic service provided by all components through the implicit "object" facet.
 */
interface IObject
{
	// The concrete type of this component instance.
	readonly IComponent component;

	<c++
		/*!
			Retrieves a service provided by this object by its type.
			Result is undefined if the component provides more than one service of type 'T'.
			\tparam T interface of the requested service.
		 */
		template<typename T> inline T* getService()
		{
			return static_cast<T*>( getServiceByType( this, typeOf<T>::get() ) );
		}

		// Returns the service "provided by" or "bound to" the port named \a portName.
		inline IService* getService( const std::string& portName )
		{
			return getServiceByName( this, portName );
		}

		// Binds a \a service to the receptacle named \a receptacleName.
		inline void setService( const std::string& receptacleName, IService* service )
		{
			setServiceByName( this, receptacleName, service );
		}
	c++>

	/*
		Returns the service "provided by" or "bound to" one of this object's ports.

		If \a port is a \e facet, this method returns the corresponding service \e provided \e by
		this component instance. Otherwise, if \a port is a \e receptacle, this method returns the
		service currently \e bound \e to the receptacle (null indicates no service is bound).

		\throw NoSuchPortException if \a port is invalid.
	 */
	IService getService( in IPort port ) raises NoSuchPortException;

	/*
		Binds a \a service to one of this object's receptacles.

		\throw NoSuchPortException if \a receptacle is not a valid receptacle.
		\throw IllegalCastException if \a service is incompatible with the \a receptacle.
		\throw IllegalStateException if \a receptacle cannot be changed in the current object state.
	 */
	void setService( in IPort receptacle, in IService service )
		raises NoSuchPortException, IllegalCastException, IllegalStateException;
};
