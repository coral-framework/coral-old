/*
	Basic service, implicitly provided by all components.
	All components have a facet named "object", of type co.IObject.
 */
interface IObject
{
	// The concrete type of this component instance.
	readonly IComponent componentType;

	<c++
		/*!
			<tt>getFacet<T>()</tt>: convenience method that returns the instance of a facet 'T' provided
			by this component. Please notice that this method only works for statically-defined components.
			It will not retrieve proxy interfaces from dynamic components (such as those implemented in Lua).
		 */
		template<typename T> inline T* getFacet() { return dynamic_cast<T*>( this ); }
	c++>

	/*
		Retrieves the service "provided by" or "bound to" one of the component's ports.

		If \a port is a \e facet, this method returns the corresponding service <em>provided by</em>
		the component. Otherwise, if \a port is a \e receptacle, this method returns the service that
		is currently <em>bound to</em> the receptacle (\c NULL indicates no service).

		\throw NoSuchPortException if the \a port is invalid.
	 */
	IService getInterface( in IPort port ) raises NoSuchPortException;

	/*
		Binds a \a service to one of the component's receptacles.
		\throw NoSuchPortException if \a receptacle is not a valid component receptacle.
		\throw IllegalCastException if the passed \a service is incompatible with the receptacle.
		\throw LifeCycleException if the receptacle cannot be changed in the component's current state.
	 */
	void setReceptacle( in IPort receptacle, in IService service )
		raises NoSuchPortException, IllegalCastException, LifeCycleException;
};
