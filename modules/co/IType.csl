/*
	Describes a Coral type.
 */
interface IType extends IAnnotated
{
	/*
		The type's local name (not considering its namespace).
		For instance, for the type <tt>liquid.drinkable.Water</tt>, the local name would be <tt>Water</tt>.
	 */
 	readonly string name;

	/*
		The type's fully qualified name.
		If the type is in the global namespace, the full name is equivalent to the type's local name.
		Otherwise, the full name is equivalent to (type.namespace.fullName + "." + type.name).
	 */
	readonly string fullName;

	// The namespace where the type is defined.
	readonly INamespace namespace;

	// The kind of type that this object represents.
	readonly TypeKind kind;

	/*
		The type's full signature: a version hash for checking if a type has changed over time.
		This considers changes to the type's binary interface, as well as other aspects that could affect
		source-code compatibility (e.g. struct field names, raised exceptions, etc.).
	 */
	readonly Uuid fullSignature;

	/*
		The type's binary signature: a version hash for checking if a type's binary interface has changed.
		This can be used to check if two interfaces are binary compatible at the C++ ABI level.
	 */
	readonly Uuid binarySignature;

	/*
		The currently set reflector for this type (which can be null).
		Get field 'reflector' instead if you want a reflector to be loaded.
	 */
	readonly IReflector currentReflector;

	/*
		The type's reflector. Getting this field may cause the type's module
		to be loaded in order to obtain the type's reflector.
		\throw ModuleLoadException if the reflector could not be obtained.
	 */
	IReflector reflector;

	/*
		Returns whether this type is a specialization of a given \a type
		(or conversely, whether \a type is a generalization of this type ).

		For types that do not support inheritance, this returns true if and
		only if \a super and \a this are the same type. Otherwise, it also
		returns true if \a this type inherits from \a type.
	 */
	bool isA( in IType type );
};
