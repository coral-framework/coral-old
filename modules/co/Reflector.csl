/*
	Provides reflective programming facilities for a \ref co::Type "Type".
 */
interface Reflector
{
	// The type we are providing reflection for.
	readonly attribute Type type;

	// Number of bytes occupied by instances of this type.
	readonly attribute int32 size;

	<c++
		// Memory manipulation of complex Coral values is only available from C++.

		/*!
			Constructs an instance of a struct or native class in the specified memory area.
			\param[in] address memory address where the instance is to be constructed.
			\param[in] length number of bytes (starting at \c address) reserved for the instance.
			\throw UnsupportedOperationException if \c type is neither a StructType nor a NativeClassType.
			\throw IllegalArgumentException if the passed \c length is not equal to the type's \c size.
		 */
		virtual void createValue( void* address, size_t length ) = 0;

		/*!
			Sets the complex value at 'toAddress' with a copy of the complex value at 'fromAddress'.
			The copy is done using the type's assignment operator.
			\warning Both pointers must point to instances of this exact 'type'.
		 */
		virtual void copyValue( const void* fromAddress, void* toAddress ) = 0;

		/*!
			Destroys the struct or native class instance located at \c address.
			The instance should have been constructed using createValue().
			\warning Expect the worst if \c address does not point to an instance of this exact type.
			\throw UnsupportedOperationException if \c type is neither a StructType nor a NativeClassType.
		 */
		virtual void destroyValue( void* address ) = 0;
	c++>

	/*
		Instantiates a component.
		\throw UnsupportedOperationException if \c type is not a ComponentType.
	 */
	Component newInstance() raises UnsupportedOperationException;

	/*
		Creates a proxy interface that forwards all calls to a given DynamicProxyHandler.

		A dynamic proxy is a lightweight interface instance (i.e. it is \e not a real component instance)
		that forwards all its calls to a \c handler interface, or to the handler's component instance.

		\throw UnsupportedOperationException if \c type is not an InterfaceType.
		\throw IllegalArgumentException if the passed \c handler is invalid (e.g. null).
	 */
	Interface newProxy( in DynamicProxyHandler handler )
		raises UnsupportedOperationException, IllegalArgumentException;

	/*
		Gets the current value of an attribute from a struct, interface or native class instance.
		\throw UnsupportedOperationException if \c type is not an AttributeContainer.
		\throw IllegalArgumentException if \c instance is not an instance of \c type, or if the
			attribute \c ai does not belong to this type.
	 */
	void getAttribute( in any instance, in AttributeInfo ai, out any value )
		raises UnsupportedOperationException, IllegalArgumentException;

	/*
		Sets the current value of an attribute in a struct, interface or native class instance.
		\throw UnsupportedOperationException if \c type is not an AttributeContainer.
		\throw IllegalArgumentException if \c instance is not an instance of \c type; if the
			attribute \c ai does not belong to this type, or if it is read-only.
		\throw IllegalCastException if \c value has no valid conversion to the actual attribute type.
			Please refer to Any's documentation for more information about type conversion rules.
	 */
	void setAttribute( in any instance, in AttributeInfo ai, in any value )
		raises UnsupportedOperationException, IllegalArgumentException, IllegalCastException;

	/*
		Invokes a method from an interface or native class instance.

		Method arguments are passed in the \c args array, in the same order they are expected
		by the callee. If \c args contains more arguments than the number of method
		parameters, the excess arguments are ignored. However, if \c args contains fewer
		arguments than the number of parameters, a MissingInputException is raised.

		Method return values are obtainable through the \c returnValue argument. Notice that
		you must \e always pass a Any at this parameter, even when the callee is a \c void
		method (in this case, the \c returnValue parameter will return unmodified).

		\throw UnsupportedOperationException if \c type is not a MethodContainer.
		\throw IllegalArgumentException if \c instance is not an instance of \c type, or if the
			method \c mi does not belong to this type.
		\throw MissingInputException if \c args contains fewer elements than the number of parameters
			expected by the callee.
		\throw IllegalCastException if one of the arguments in \c args has no valid conversion to the
			actual parameter type. Please refer to Any's documentation for more information
			about type conversion rules.
	 */
	void invokeMethod( in any instance, in MethodInfo mi, in any[] args, out any returnValue )
		raises UnsupportedOperationException, IllegalArgumentException, MissingInputException, IllegalCastException;
};
